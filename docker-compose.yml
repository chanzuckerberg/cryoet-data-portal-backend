services:
  nginx:
    image: nginx
    ports:
      - "4444:80"
    volumes:
      - ./test_infra/test_files:/usr/share/nginx/html
  motoserver:
    image: motoserver/moto:4.1.0
    ports:
      - "5566:5566"
    environment:
      - MOTO_PORT=5566
      - S3_IGNORE_SUBDOMAIN_BUCKETNAME=True
    volumes:
      - ./bin:/moto/bin
  db:
    image: postgres:14.2
    healthcheck:
      test: ['CMD', 'pg_isready', '-d', 'cryoet', '-U', 'postgres']
    environment:
      POSTGRES_INITDB_ARGS: --data-checksums
      POSTGRES_DB: cryoet
      POSTGRES_PASSWORD: postgres
      POSTGRES_USER: postgres
      # The postgres image declares a mounted volume at /var/lib/postgresql/data
      # by default, which means that the data in that directory is difficult to
      # snapshot and export. Here, we're telling Postgres to use this (non-mounted)
      # directory as its storage location instead so it works with our db snapshot
      # workflow.
      PGDATA: /var/lib/cryoetdataportal/data
    volumes:
      - ./test_infra:/test_infra
    ports:
      - '5432:5432'
  cryoet-api:
    platform: linux/arm64
    profiles: ["api"]
    image: hasura-graphql
    build:
      context: ./api_server
      dockerfile: Dockerfile
    volumes:
      - ./api_server/migrations:/hasura-migrations
      - ./api_server/metadata:/hasura-metadata
    healthcheck:
      test: timeout 1s bash -c ':> /dev/tcp/127.0.0.1/8080' || exit 1
    depends_on:
      db:
        condition: service_healthy
    environment:
      HASURA_GRAPHQL_ENABLE_CONSOLE: 'false'
      HASURA_GRAPHQL_DATABASE_URL: postgresql://postgres:postgres@db:5432/cryoet
      HASURA_GRAPHQL_ADMIN_SECRET: secret
      HASURA_GRAPHQL_UNAUTHORIZED_ROLE: anonymous
    ports:
      - '8080:8080'
  hasura-console:
    platform: linux/arm64
    profiles: ["api"]
    image: hasura-graphql
    build:
      context: ./api_server
      dockerfile: Dockerfile
    volumes:
      - ./api_server:/app
    healthcheck:
      test: timeout 1s bash -c ':> /dev/tcp/127.0.0.1/9695' || exit 1
    working_dir: /app
    command: hasura-cli console
      --no-browser
      --endpoint http://cryoet-api:8080
      --admin-secret secret
      --address 0.0.0.0
      --console-port 9695
      --api-port 9693
      --console-hge-endpoint http://localhost:8080
    ports:
      - '9695:9695'
      - '9693:9693'
    depends_on:
      cryoet-api:
        condition: service_healthy
    environment:
      HASURA_GRAPHQL_DATABASE_URL: postgres://postgres:postgres@db:5432/cryoet
