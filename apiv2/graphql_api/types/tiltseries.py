"""
GraphQL type for Tiltseries

Auto-generated by running 'make codegen'. Do not edit.
Make changes to the template codegen/templates/graphql_api/types/class_name.py.j2 instead.
"""

# ruff: noqa: E501 Line too long


import datetime
import enum
import typing
from typing import TYPE_CHECKING, Annotated, Optional, Sequence

import database.models as db
import strawberry
from fastapi import Depends
from graphql_api.helpers.tiltseries import TiltseriesGroupByOptions, build_tiltseries_groupby_output
from graphql_api.types.alignment import AlignmentAggregate, format_alignment_aggregate_output
from graphql_api.types.per_section_parameters import (
    PerSectionParametersAggregate,
    format_per_section_parameters_aggregate_output,
)
from sqlalchemy import inspect
from sqlalchemy.engine.row import RowMapping
from sqlalchemy.ext.asyncio import AsyncSession
from strawberry import relay
from strawberry.types import Info
from support.enums import tiltseries_microscope_manufacturer_enum
from support.limit_offset import LimitOffsetClause
from typing_extensions import TypedDict
from validators.tiltseries import TiltseriesCreateInputValidator, TiltseriesUpdateInputValidator

from platformics.graphql_api.core.deps import get_authz_client, get_db_session, is_system_user, require_auth_principal
from platformics.graphql_api.core.errors import PlatformicsError
from platformics.graphql_api.core.query_builder import get_aggregate_db_rows, get_db_rows
from platformics.graphql_api.core.query_input_types import (
    BoolComparators,
    EnumComparators,
    FloatComparators,
    IntComparators,
    StrComparators,
    aggregator_map,
    orderBy,
)
from platformics.graphql_api.core.relay_interface import EntityInterface
from platformics.graphql_api.core.strawberry_extensions import DependencyExtension
from platformics.security.authorization import AuthzAction, AuthzClient, Principal

E = typing.TypeVar("E")
T = typing.TypeVar("T")

if TYPE_CHECKING:
    from graphql_api.types.alignment import Alignment, AlignmentOrderByClause, AlignmentWhereClause
    from graphql_api.types.deposition import Deposition, DepositionOrderByClause, DepositionWhereClause
    from graphql_api.types.per_section_parameters import (
        PerSectionParameters,
        PerSectionParametersOrderByClause,
        PerSectionParametersWhereClause,
    )
    from graphql_api.types.run import Run, RunOrderByClause, RunWhereClause

    pass
else:
    AlignmentWhereClause = "AlignmentWhereClause"
    Alignment = "Alignment"
    AlignmentOrderByClause = "AlignmentOrderByClause"
    PerSectionParametersWhereClause = "PerSectionParametersWhereClause"
    PerSectionParameters = "PerSectionParameters"
    PerSectionParametersOrderByClause = "PerSectionParametersOrderByClause"
    RunWhereClause = "RunWhereClause"
    Run = "Run"
    RunOrderByClause = "RunOrderByClause"
    DepositionWhereClause = "DepositionWhereClause"
    Deposition = "Deposition"
    DepositionOrderByClause = "DepositionOrderByClause"
    pass


"""
------------------------------------------------------------------------------
Dataloaders
------------------------------------------------------------------------------
These are batching functions for loading related objects to avoid N+1 queries.
"""


@relay.connection(
    relay.ListConnection[Annotated["Alignment", strawberry.lazy("graphql_api.types.alignment")]],  # type:ignore
)
async def load_alignment_rows(
    root: "Tiltseries",
    info: Info,
    where: Annotated["AlignmentWhereClause", strawberry.lazy("graphql_api.types.alignment")] | None = None,
    order_by: Optional[list[Annotated["AlignmentOrderByClause", strawberry.lazy("graphql_api.types.alignment")]]] = [],
) -> Sequence[Annotated["Alignment", strawberry.lazy("graphql_api.types.alignment")]]:
    dataloader = info.context["sqlalchemy_loader"]
    mapper = inspect(db.Tiltseries)
    relationship = mapper.relationships["alignments"]
    return await dataloader.loader_for(relationship, where, order_by).load(root.id)  # type:ignore


@strawberry.field
async def load_alignment_aggregate_rows(
    root: "Tiltseries",
    info: Info,
    where: Annotated["AlignmentWhereClause", strawberry.lazy("graphql_api.types.alignment")] | None = None,
) -> Optional[Annotated["AlignmentAggregate", strawberry.lazy("graphql_api.types.alignment")]]:
    selections = info.selected_fields[0].selections[0].selections
    dataloader = info.context["sqlalchemy_loader"]
    mapper = inspect(db.Tiltseries)
    relationship = mapper.relationships["alignments"]
    rows = await dataloader.aggregate_loader_for(relationship, where, selections).load(root.id)  # type:ignore
    aggregate_output = format_alignment_aggregate_output(rows)
    return aggregate_output


@relay.connection(
    relay.ListConnection[
        Annotated["PerSectionParameters", strawberry.lazy("graphql_api.types.per_section_parameters")]
    ],  # type:ignore
)
async def load_per_section_parameters_rows(
    root: "Tiltseries",
    info: Info,
    where: (
        Annotated["PerSectionParametersWhereClause", strawberry.lazy("graphql_api.types.per_section_parameters")] | None
    ) = None,
    order_by: Optional[
        list[
            Annotated["PerSectionParametersOrderByClause", strawberry.lazy("graphql_api.types.per_section_parameters")]
        ]
    ] = [],
) -> Sequence[Annotated["PerSectionParameters", strawberry.lazy("graphql_api.types.per_section_parameters")]]:
    dataloader = info.context["sqlalchemy_loader"]
    mapper = inspect(db.Tiltseries)
    relationship = mapper.relationships["per_section_parameters"]
    return await dataloader.loader_for(relationship, where, order_by).load(root.id)  # type:ignore


@strawberry.field
async def load_per_section_parameters_aggregate_rows(
    root: "Tiltseries",
    info: Info,
    where: (
        Annotated["PerSectionParametersWhereClause", strawberry.lazy("graphql_api.types.per_section_parameters")] | None
    ) = None,
) -> Optional[Annotated["PerSectionParametersAggregate", strawberry.lazy("graphql_api.types.per_section_parameters")]]:
    selections = info.selected_fields[0].selections[0].selections
    dataloader = info.context["sqlalchemy_loader"]
    mapper = inspect(db.Tiltseries)
    relationship = mapper.relationships["per_section_parameters"]
    rows = await dataloader.aggregate_loader_for(relationship, where, selections).load(root.id)  # type:ignore
    aggregate_output = format_per_section_parameters_aggregate_output(rows)
    return aggregate_output


@strawberry.field
async def load_run_rows(
    root: "Tiltseries",
    info: Info,
    where: Annotated["RunWhereClause", strawberry.lazy("graphql_api.types.run")] | None = None,
    order_by: Optional[list[Annotated["RunOrderByClause", strawberry.lazy("graphql_api.types.run")]]] = [],
) -> Optional[Annotated["Run", strawberry.lazy("graphql_api.types.run")]]:
    dataloader = info.context["sqlalchemy_loader"]
    mapper = inspect(db.Tiltseries)
    relationship = mapper.relationships["run"]
    return await dataloader.loader_for(relationship, where, order_by).load(root.run_id)  # type:ignore


@strawberry.field
async def load_deposition_rows(
    root: "Tiltseries",
    info: Info,
    where: Annotated["DepositionWhereClause", strawberry.lazy("graphql_api.types.deposition")] | None = None,
    order_by: Optional[
        list[Annotated["DepositionOrderByClause", strawberry.lazy("graphql_api.types.deposition")]]
    ] = [],
) -> Optional[Annotated["Deposition", strawberry.lazy("graphql_api.types.deposition")]]:
    dataloader = info.context["sqlalchemy_loader"]
    mapper = inspect(db.Tiltseries)
    relationship = mapper.relationships["deposition"]
    return await dataloader.loader_for(relationship, where, order_by).load(root.deposition_id)  # type:ignore


"""
------------------------------------------------------------------------------
Define Strawberry GQL types
------------------------------------------------------------------------------
"""


"""
Only let users specify IDs in WHERE clause when mutating data (for safety).
We can extend that list as we gather more use cases from the FE team.
"""


@strawberry.input
class TiltseriesWhereClauseMutations(TypedDict):
    id: IntComparators | None


"""
Supported WHERE clause attributes
"""


@strawberry.input
class TiltseriesWhereClause(TypedDict):
    alignments: Optional[Annotated["AlignmentWhereClause", strawberry.lazy("graphql_api.types.alignment")]] | None
    per_section_parameters: (
        Optional[
            Annotated["PerSectionParametersWhereClause", strawberry.lazy("graphql_api.types.per_section_parameters")]
        ]
        | None
    )
    run: Optional[Annotated["RunWhereClause", strawberry.lazy("graphql_api.types.run")]] | None
    deposition: Optional[Annotated["DepositionWhereClause", strawberry.lazy("graphql_api.types.deposition")]] | None
    s3_omezarr_dir: Optional[StrComparators] | None
    s3_mrc_file: Optional[StrComparators] | None
    https_omezarr_dir: Optional[StrComparators] | None
    https_mrc_file: Optional[StrComparators] | None
    s3_collection_metadata: Optional[StrComparators] | None
    https_collection_metadata: Optional[StrComparators] | None
    s3_angle_list: Optional[StrComparators] | None
    https_angle_list: Optional[StrComparators] | None
    s3_gain_file: Optional[StrComparators] | None
    https_gain_file: Optional[StrComparators] | None
    acceleration_voltage: Optional[IntComparators] | None
    spherical_aberration_constant: Optional[FloatComparators] | None
    microscope_manufacturer: Optional[EnumComparators[tiltseries_microscope_manufacturer_enum]] | None
    microscope_model: Optional[StrComparators] | None
    microscope_energy_filter: Optional[StrComparators] | None
    microscope_phase_plate: Optional[StrComparators] | None
    microscope_image_corrector: Optional[StrComparators] | None
    microscope_additional_info: Optional[StrComparators] | None
    camera_manufacturer: Optional[StrComparators] | None
    camera_model: Optional[StrComparators] | None
    tilt_min: Optional[FloatComparators] | None
    tilt_max: Optional[FloatComparators] | None
    tilt_range: Optional[FloatComparators] | None
    tilt_step: Optional[FloatComparators] | None
    tilting_scheme: Optional[StrComparators] | None
    tilt_axis: Optional[FloatComparators] | None
    total_flux: Optional[FloatComparators] | None
    data_acquisition_software: Optional[StrComparators] | None
    related_empiar_entry: Optional[StrComparators] | None
    binning_from_frames: Optional[FloatComparators] | None
    tilt_series_quality: Optional[IntComparators] | None
    is_aligned: Optional[BoolComparators] | None
    pixel_spacing: Optional[FloatComparators] | None
    aligned_tiltseries_binning: Optional[IntComparators] | None
    frames_count: Optional[IntComparators] | None
    id: Optional[IntComparators] | None


"""
Supported ORDER BY clause attributes
"""


@strawberry.input
class TiltseriesOrderByClause(TypedDict):
    run: Optional[Annotated["RunOrderByClause", strawberry.lazy("graphql_api.types.run")]] | None
    deposition: Optional[Annotated["DepositionOrderByClause", strawberry.lazy("graphql_api.types.deposition")]] | None
    s3_omezarr_dir: Optional[orderBy] | None
    s3_mrc_file: Optional[orderBy] | None
    https_omezarr_dir: Optional[orderBy] | None
    https_mrc_file: Optional[orderBy] | None
    s3_collection_metadata: Optional[orderBy] | None
    https_collection_metadata: Optional[orderBy] | None
    s3_angle_list: Optional[orderBy] | None
    https_angle_list: Optional[orderBy] | None
    s3_gain_file: Optional[orderBy] | None
    https_gain_file: Optional[orderBy] | None
    acceleration_voltage: Optional[orderBy] | None
    spherical_aberration_constant: Optional[orderBy] | None
    microscope_manufacturer: Optional[orderBy] | None
    microscope_model: Optional[orderBy] | None
    microscope_energy_filter: Optional[orderBy] | None
    microscope_phase_plate: Optional[orderBy] | None
    microscope_image_corrector: Optional[orderBy] | None
    microscope_additional_info: Optional[orderBy] | None
    camera_manufacturer: Optional[orderBy] | None
    camera_model: Optional[orderBy] | None
    tilt_min: Optional[orderBy] | None
    tilt_max: Optional[orderBy] | None
    tilt_range: Optional[orderBy] | None
    tilt_step: Optional[orderBy] | None
    tilting_scheme: Optional[orderBy] | None
    tilt_axis: Optional[orderBy] | None
    total_flux: Optional[orderBy] | None
    data_acquisition_software: Optional[orderBy] | None
    related_empiar_entry: Optional[orderBy] | None
    binning_from_frames: Optional[orderBy] | None
    tilt_series_quality: Optional[orderBy] | None
    is_aligned: Optional[orderBy] | None
    pixel_spacing: Optional[orderBy] | None
    aligned_tiltseries_binning: Optional[orderBy] | None
    frames_count: Optional[orderBy] | None
    id: Optional[orderBy] | None


"""
Define Tiltseries type
"""


@strawberry.type(description=None)
class Tiltseries(EntityInterface):
    alignments: Sequence[Annotated["Alignment", strawberry.lazy("graphql_api.types.alignment")]] = (
        load_alignment_rows
    )  # type:ignore
    alignments_aggregate: Optional[Annotated["AlignmentAggregate", strawberry.lazy("graphql_api.types.alignment")]] = (
        load_alignment_aggregate_rows
    )  # type:ignore
    per_section_parameters: Sequence[
        Annotated["PerSectionParameters", strawberry.lazy("graphql_api.types.per_section_parameters")]
    ] = load_per_section_parameters_rows  # type:ignore
    per_section_parameters_aggregate: Optional[
        Annotated["PerSectionParametersAggregate", strawberry.lazy("graphql_api.types.per_section_parameters")]
    ] = load_per_section_parameters_aggregate_rows  # type:ignore
    run: Optional[Annotated["Run", strawberry.lazy("graphql_api.types.run")]] = load_run_rows  # type:ignore
    run_id: int
    deposition: Optional[Annotated["Deposition", strawberry.lazy("graphql_api.types.deposition")]] = (
        load_deposition_rows
    )  # type:ignore
    deposition_id: Optional[int]
    s3_omezarr_dir: Optional[str] = strawberry.field(
        description="S3 path to this tiltseries in multiscale OME-Zarr format", default=None,
    )
    s3_mrc_file: Optional[str] = strawberry.field(
        description="S3 path to this tiltseries in MRC format (no scaling)", default=None,
    )
    https_omezarr_dir: Optional[str] = strawberry.field(
        description="HTTPS path to this tiltseries in multiscale OME-Zarr format", default=None,
    )
    https_mrc_file: Optional[str] = strawberry.field(
        description="HTTPS path to this tiltseries in MRC format (no scaling)", default=None,
    )
    s3_collection_metadata: Optional[str] = strawberry.field(
        description="S3 path to the collection metadata file for this tiltseries", default=None,
    )
    https_collection_metadata: Optional[str] = strawberry.field(
        description="HTTPS path to the collection metadata file for this tiltseries", default=None,
    )
    s3_angle_list: Optional[str] = strawberry.field(
        description="S3 path to the angle list file for this tiltseries", default=None,
    )
    https_angle_list: Optional[str] = strawberry.field(
        description="HTTPS path to the angle list file for this tiltseries", default=None,
    )
    s3_gain_file: Optional[str] = strawberry.field(
        description="S3 path to the gain file for this tiltseries", default=None,
    )
    https_gain_file: Optional[str] = strawberry.field(
        description="HTTPS path to the gain file for this tiltseries", default=None,
    )
    acceleration_voltage: int = strawberry.field(description="Electron Microscope Accelerator voltage in volts")
    spherical_aberration_constant: float = strawberry.field(
        description="Spherical Aberration Constant of the objective lens in millimeters",
    )
    microscope_manufacturer: tiltseries_microscope_manufacturer_enum = strawberry.field(
        description="Name of the microscope manufacturer (FEI, TFS, JEOL)",
    )
    microscope_model: str = strawberry.field(description="Microscope model name")
    microscope_energy_filter: str = strawberry.field(description="Energy filter setup used")
    microscope_phase_plate: Optional[str] = strawberry.field(description="Phase plate configuration", default=None)
    microscope_image_corrector: Optional[str] = strawberry.field(description="Image corrector setup", default=None)
    microscope_additional_info: Optional[str] = strawberry.field(
        description="Other microscope optical setup information, in addition to energy filter, phase plate and image corrector",
        default=None,
    )
    camera_manufacturer: str = strawberry.field(description="Name of the camera manufacturer")
    camera_model: str = strawberry.field(description="Camera model name")
    tilt_min: float = strawberry.field(description="Minimal tilt angle in degrees")
    tilt_max: float = strawberry.field(description="Maximal tilt angle in degrees")
    tilt_range: float = strawberry.field(description="Total tilt range in degrees")
    tilt_step: float = strawberry.field(description="Tilt step in degrees")
    tilting_scheme: str = strawberry.field(description="The order of stage tilting during acquisition of the data")
    tilt_axis: float = strawberry.field(description="Rotation angle in degrees")
    total_flux: float = strawberry.field(
        description="Number of Electrons reaching the specimen in a square Angstrom area for the entire tilt series",
    )
    data_acquisition_software: str = strawberry.field(description="Software used to collect data")
    related_empiar_entry: Optional[str] = strawberry.field(
        description="If a tilt series is deposited into EMPIAR, enter the EMPIAR dataset identifier", default=None,
    )
    binning_from_frames: Optional[float] = strawberry.field(
        description="Describes the binning factor from frames to tilt series file", default=None,
    )
    tilt_series_quality: int = strawberry.field(
        description="Author assessment of tilt series quality within the dataset (1-5, 5 is best)",
    )
    is_aligned: bool = strawberry.field(description="Whether this tilt series is aligned")
    pixel_spacing: float = strawberry.field(description="Pixel spacing equal in both axes in angstroms")
    aligned_tiltseries_binning: Optional[int] = strawberry.field(
        description="Binning factor of the aligned tilt series", default=None,
    )
    frames_count: Optional[int] = strawberry.field(
        description="Number of frames associated with this tiltseries", default=None,
    )
    id: int = strawberry.field(description="Numeric identifier (May change!)")


"""
We need to add this to each Queryable type so that strawberry will accept either our
Strawberry type *or* a SQLAlchemy model instance as a valid response class from a resolver
"""
Tiltseries.__strawberry_definition__.is_type_of = (  # type: ignore
    lambda obj, info: type(obj) == db.Tiltseries or type(obj) == Tiltseries
)

"""
------------------------------------------------------------------------------
Aggregation types
------------------------------------------------------------------------------
"""
"""
Define columns that support numerical aggregations
"""


@strawberry.type
class TiltseriesNumericalColumns:
    acceleration_voltage: Optional[int] = None
    spherical_aberration_constant: Optional[float] = None
    tilt_min: Optional[float] = None
    tilt_max: Optional[float] = None
    tilt_range: Optional[float] = None
    tilt_step: Optional[float] = None
    tilt_axis: Optional[float] = None
    total_flux: Optional[float] = None
    binning_from_frames: Optional[float] = None
    tilt_series_quality: Optional[int] = None
    pixel_spacing: Optional[float] = None
    aligned_tiltseries_binning: Optional[int] = None
    frames_count: Optional[int] = None
    id: Optional[int] = None


"""
Define columns that support min/max aggregations
"""


@strawberry.type
class TiltseriesMinMaxColumns:
    s3_omezarr_dir: Optional[str] = None
    s3_mrc_file: Optional[str] = None
    https_omezarr_dir: Optional[str] = None
    https_mrc_file: Optional[str] = None
    s3_collection_metadata: Optional[str] = None
    https_collection_metadata: Optional[str] = None
    s3_angle_list: Optional[str] = None
    https_angle_list: Optional[str] = None
    s3_gain_file: Optional[str] = None
    https_gain_file: Optional[str] = None
    acceleration_voltage: Optional[int] = None
    spherical_aberration_constant: Optional[float] = None
    microscope_model: Optional[str] = None
    microscope_energy_filter: Optional[str] = None
    microscope_phase_plate: Optional[str] = None
    microscope_image_corrector: Optional[str] = None
    microscope_additional_info: Optional[str] = None
    camera_manufacturer: Optional[str] = None
    camera_model: Optional[str] = None
    tilt_min: Optional[float] = None
    tilt_max: Optional[float] = None
    tilt_range: Optional[float] = None
    tilt_step: Optional[float] = None
    tilting_scheme: Optional[str] = None
    tilt_axis: Optional[float] = None
    total_flux: Optional[float] = None
    data_acquisition_software: Optional[str] = None
    related_empiar_entry: Optional[str] = None
    binning_from_frames: Optional[float] = None
    tilt_series_quality: Optional[int] = None
    pixel_spacing: Optional[float] = None
    aligned_tiltseries_binning: Optional[int] = None
    frames_count: Optional[int] = None
    id: Optional[int] = None


"""
Define enum of all columns to support count and count(distinct) aggregations
"""


@strawberry.enum
class TiltseriesCountColumns(enum.Enum):
    alignments = "alignments"
    perSectionParameters = "per_section_parameters"
    run = "run"
    deposition = "deposition"
    s3OmezarrDir = "s3_omezarr_dir"
    s3MrcFile = "s3_mrc_file"
    httpsOmezarrDir = "https_omezarr_dir"
    httpsMrcFile = "https_mrc_file"
    s3CollectionMetadata = "s3_collection_metadata"
    httpsCollectionMetadata = "https_collection_metadata"
    s3AngleList = "s3_angle_list"
    httpsAngleList = "https_angle_list"
    s3GainFile = "s3_gain_file"
    httpsGainFile = "https_gain_file"
    accelerationVoltage = "acceleration_voltage"
    sphericalAberrationConstant = "spherical_aberration_constant"
    microscopeManufacturer = "microscope_manufacturer"
    microscopeModel = "microscope_model"
    microscopeEnergyFilter = "microscope_energy_filter"
    microscopePhasePlate = "microscope_phase_plate"
    microscopeImageCorrector = "microscope_image_corrector"
    microscopeAdditionalInfo = "microscope_additional_info"
    cameraManufacturer = "camera_manufacturer"
    cameraModel = "camera_model"
    tiltMin = "tilt_min"
    tiltMax = "tilt_max"
    tiltRange = "tilt_range"
    tiltStep = "tilt_step"
    tiltingScheme = "tilting_scheme"
    tiltAxis = "tilt_axis"
    totalFlux = "total_flux"
    dataAcquisitionSoftware = "data_acquisition_software"
    relatedEmpiarEntry = "related_empiar_entry"
    binningFromFrames = "binning_from_frames"
    tiltSeriesQuality = "tilt_series_quality"
    isAligned = "is_aligned"
    pixelSpacing = "pixel_spacing"
    alignedTiltseriesBinning = "aligned_tiltseries_binning"
    framesCount = "frames_count"
    id = "id"


"""
All supported aggregation functions
"""


@strawberry.type
class TiltseriesAggregateFunctions:
    # This is a hack to accept "distinct" and "columns" as arguments to "count"
    @strawberry.field
    def count(
        self, distinct: Optional[bool] = False, columns: Optional[TiltseriesCountColumns] = None,
    ) -> Optional[int]:
        # Count gets set with the proper value in the resolver, so we just return it here
        return self.count  # type: ignore

    sum: Optional[TiltseriesNumericalColumns] = None
    avg: Optional[TiltseriesNumericalColumns] = None
    stddev: Optional[TiltseriesNumericalColumns] = None
    variance: Optional[TiltseriesNumericalColumns] = None
    min: Optional[TiltseriesMinMaxColumns] = None
    max: Optional[TiltseriesMinMaxColumns] = None
    groupBy: Optional[TiltseriesGroupByOptions] = None


"""
Wrapper around TiltseriesAggregateFunctions
"""


@strawberry.type
class TiltseriesAggregate:
    aggregate: Optional[list[TiltseriesAggregateFunctions]] = None


"""
------------------------------------------------------------------------------
Mutation types
------------------------------------------------------------------------------
"""


@strawberry.input()
class TiltseriesCreateInput:
    run_id: strawberry.ID = strawberry.field(description=None)
    deposition_id: Optional[strawberry.ID] = strawberry.field(description=None, default=None)
    s3_omezarr_dir: Optional[str] = strawberry.field(
        description="S3 path to this tiltseries in multiscale OME-Zarr format", default=None,
    )
    s3_mrc_file: Optional[str] = strawberry.field(
        description="S3 path to this tiltseries in MRC format (no scaling)", default=None,
    )
    https_omezarr_dir: Optional[str] = strawberry.field(
        description="HTTPS path to this tiltseries in multiscale OME-Zarr format", default=None,
    )
    https_mrc_file: Optional[str] = strawberry.field(
        description="HTTPS path to this tiltseries in MRC format (no scaling)", default=None,
    )
    s3_collection_metadata: Optional[str] = strawberry.field(
        description="S3 path to the collection metadata file for this tiltseries", default=None,
    )
    https_collection_metadata: Optional[str] = strawberry.field(
        description="HTTPS path to the collection metadata file for this tiltseries", default=None,
    )
    s3_angle_list: Optional[str] = strawberry.field(
        description="S3 path to the angle list file for this tiltseries", default=None,
    )
    https_angle_list: Optional[str] = strawberry.field(
        description="HTTPS path to the angle list file for this tiltseries", default=None,
    )
    s3_gain_file: Optional[str] = strawberry.field(
        description="S3 path to the gain file for this tiltseries", default=None,
    )
    https_gain_file: Optional[str] = strawberry.field(
        description="HTTPS path to the gain file for this tiltseries", default=None,
    )
    acceleration_voltage: int = strawberry.field(description="Electron Microscope Accelerator voltage in volts")
    spherical_aberration_constant: float = strawberry.field(
        description="Spherical Aberration Constant of the objective lens in millimeters",
    )
    microscope_manufacturer: tiltseries_microscope_manufacturer_enum = strawberry.field(
        description="Name of the microscope manufacturer (FEI, TFS, JEOL)",
    )
    microscope_model: str = strawberry.field(description="Microscope model name")
    microscope_energy_filter: str = strawberry.field(description="Energy filter setup used")
    microscope_phase_plate: Optional[str] = strawberry.field(description="Phase plate configuration", default=None)
    microscope_image_corrector: Optional[str] = strawberry.field(description="Image corrector setup", default=None)
    microscope_additional_info: Optional[str] = strawberry.field(
        description="Other microscope optical setup information, in addition to energy filter, phase plate and image corrector",
        default=None,
    )
    camera_manufacturer: str = strawberry.field(description="Name of the camera manufacturer")
    camera_model: str = strawberry.field(description="Camera model name")
    tilt_min: float = strawberry.field(description="Minimal tilt angle in degrees")
    tilt_max: float = strawberry.field(description="Maximal tilt angle in degrees")
    tilt_range: float = strawberry.field(description="Total tilt range in degrees")
    tilt_step: float = strawberry.field(description="Tilt step in degrees")
    tilting_scheme: str = strawberry.field(description="The order of stage tilting during acquisition of the data")
    tilt_axis: float = strawberry.field(description="Rotation angle in degrees")
    total_flux: float = strawberry.field(
        description="Number of Electrons reaching the specimen in a square Angstrom area for the entire tilt series",
    )
    data_acquisition_software: str = strawberry.field(description="Software used to collect data")
    related_empiar_entry: Optional[str] = strawberry.field(
        description="If a tilt series is deposited into EMPIAR, enter the EMPIAR dataset identifier", default=None,
    )
    binning_from_frames: Optional[float] = strawberry.field(
        description="Describes the binning factor from frames to tilt series file", default=None,
    )
    tilt_series_quality: int = strawberry.field(
        description="Author assessment of tilt series quality within the dataset (1-5, 5 is best)",
    )
    is_aligned: bool = strawberry.field(description="Whether this tilt series is aligned")
    pixel_spacing: float = strawberry.field(description="Pixel spacing equal in both axes in angstroms")
    aligned_tiltseries_binning: Optional[int] = strawberry.field(
        description="Binning factor of the aligned tilt series", default=None,
    )
    frames_count: Optional[int] = strawberry.field(
        description="Number of frames associated with this tiltseries", default=None,
    )
    id: int = strawberry.field(description="Numeric identifier (May change!)")


@strawberry.input()
class TiltseriesUpdateInput:
    run_id: Optional[strawberry.ID] = strawberry.field(description=None)
    deposition_id: Optional[strawberry.ID] = strawberry.field(description=None, default=None)
    s3_omezarr_dir: Optional[str] = strawberry.field(
        description="S3 path to this tiltseries in multiscale OME-Zarr format", default=None,
    )
    s3_mrc_file: Optional[str] = strawberry.field(
        description="S3 path to this tiltseries in MRC format (no scaling)", default=None,
    )
    https_omezarr_dir: Optional[str] = strawberry.field(
        description="HTTPS path to this tiltseries in multiscale OME-Zarr format", default=None,
    )
    https_mrc_file: Optional[str] = strawberry.field(
        description="HTTPS path to this tiltseries in MRC format (no scaling)", default=None,
    )
    s3_collection_metadata: Optional[str] = strawberry.field(
        description="S3 path to the collection metadata file for this tiltseries", default=None,
    )
    https_collection_metadata: Optional[str] = strawberry.field(
        description="HTTPS path to the collection metadata file for this tiltseries", default=None,
    )
    s3_angle_list: Optional[str] = strawberry.field(
        description="S3 path to the angle list file for this tiltseries", default=None,
    )
    https_angle_list: Optional[str] = strawberry.field(
        description="HTTPS path to the angle list file for this tiltseries", default=None,
    )
    s3_gain_file: Optional[str] = strawberry.field(
        description="S3 path to the gain file for this tiltseries", default=None,
    )
    https_gain_file: Optional[str] = strawberry.field(
        description="HTTPS path to the gain file for this tiltseries", default=None,
    )
    acceleration_voltage: Optional[int] = strawberry.field(
        description="Electron Microscope Accelerator voltage in volts",
    )
    spherical_aberration_constant: Optional[float] = strawberry.field(
        description="Spherical Aberration Constant of the objective lens in millimeters",
    )
    microscope_manufacturer: Optional[tiltseries_microscope_manufacturer_enum] = strawberry.field(
        description="Name of the microscope manufacturer (FEI, TFS, JEOL)",
    )
    microscope_model: Optional[str] = strawberry.field(description="Microscope model name")
    microscope_energy_filter: Optional[str] = strawberry.field(description="Energy filter setup used")
    microscope_phase_plate: Optional[str] = strawberry.field(description="Phase plate configuration", default=None)
    microscope_image_corrector: Optional[str] = strawberry.field(description="Image corrector setup", default=None)
    microscope_additional_info: Optional[str] = strawberry.field(
        description="Other microscope optical setup information, in addition to energy filter, phase plate and image corrector",
        default=None,
    )
    camera_manufacturer: Optional[str] = strawberry.field(description="Name of the camera manufacturer")
    camera_model: Optional[str] = strawberry.field(description="Camera model name")
    tilt_min: Optional[float] = strawberry.field(description="Minimal tilt angle in degrees")
    tilt_max: Optional[float] = strawberry.field(description="Maximal tilt angle in degrees")
    tilt_range: Optional[float] = strawberry.field(description="Total tilt range in degrees")
    tilt_step: Optional[float] = strawberry.field(description="Tilt step in degrees")
    tilting_scheme: Optional[str] = strawberry.field(
        description="The order of stage tilting during acquisition of the data",
    )
    tilt_axis: Optional[float] = strawberry.field(description="Rotation angle in degrees")
    total_flux: Optional[float] = strawberry.field(
        description="Number of Electrons reaching the specimen in a square Angstrom area for the entire tilt series",
    )
    data_acquisition_software: Optional[str] = strawberry.field(description="Software used to collect data")
    related_empiar_entry: Optional[str] = strawberry.field(
        description="If a tilt series is deposited into EMPIAR, enter the EMPIAR dataset identifier", default=None,
    )
    binning_from_frames: Optional[float] = strawberry.field(
        description="Describes the binning factor from frames to tilt series file", default=None,
    )
    tilt_series_quality: Optional[int] = strawberry.field(
        description="Author assessment of tilt series quality within the dataset (1-5, 5 is best)",
    )
    is_aligned: Optional[bool] = strawberry.field(description="Whether this tilt series is aligned")
    pixel_spacing: Optional[float] = strawberry.field(description="Pixel spacing equal in both axes in angstroms")
    aligned_tiltseries_binning: Optional[int] = strawberry.field(
        description="Binning factor of the aligned tilt series", default=None,
    )
    frames_count: Optional[int] = strawberry.field(
        description="Number of frames associated with this tiltseries", default=None,
    )
    id: Optional[int] = strawberry.field(description="Numeric identifier (May change!)")


"""
------------------------------------------------------------------------------
Utilities
------------------------------------------------------------------------------
"""


@strawberry.field(extensions=[DependencyExtension()])
async def resolve_tiltseries(
    session: AsyncSession = Depends(get_db_session, use_cache=False),
    authz_client: AuthzClient = Depends(get_authz_client),
    principal: Principal = Depends(require_auth_principal),
    where: Optional[TiltseriesWhereClause] = None,
    order_by: Optional[list[TiltseriesOrderByClause]] = [],
    limit_offset: Optional[LimitOffsetClause] = None,
) -> typing.Sequence[Tiltseries]:
    """
    Resolve Tiltseries objects. Used for queries (see graphql_api/queries.py).
    """
    limit = limit_offset["limit"] if limit_offset and "limit" in limit_offset else None
    offset = limit_offset["offset"] if limit_offset and "offset" in limit_offset else None
    if offset and not limit:
        raise PlatformicsError("Cannot use offset without limit")
    return await get_db_rows(db.Tiltseries, session, authz_client, principal, where, order_by, AuthzAction.VIEW, limit, offset)  # type: ignore


def format_tiltseries_aggregate_output(query_results: Sequence[RowMapping] | RowMapping) -> TiltseriesAggregate:
    """
    Given a row from the DB containing the results of an aggregate query,
    format the results using the proper GraphQL types.
    """
    aggregate = []
    if type(query_results) is not list:
        query_results = [query_results]  # type: ignore
    for row in query_results:
        aggregate.append(format_tiltseries_aggregate_row(row))
    return TiltseriesAggregate(aggregate=aggregate)


def format_tiltseries_aggregate_row(row: RowMapping) -> TiltseriesAggregateFunctions:
    """
    Given a single row from the DB containing the results of an aggregate query,
    format the results using the proper GraphQL types.
    """
    output = TiltseriesAggregateFunctions()
    for key, value in row.items():
        # Key is either an aggregate function or a groupby key
        group_keys = key.split(".")
        aggregate = key.split("_", 1)
        if aggregate[0] not in aggregator_map.keys():
            # Turn list of groupby keys into nested objects
            if not output.groupBy:
                output.groupBy = TiltseriesGroupByOptions()
            group = build_tiltseries_groupby_output(output.groupBy, group_keys, value)
            output.groupBy = group
        else:
            aggregate_name = aggregate[0]
            if aggregate_name == "count":
                output.count = value
            else:
                aggregator_fn, col_name = aggregate[0], aggregate[1]
                if not getattr(output, aggregator_fn):
                    if aggregate_name in ["min", "max"]:
                        setattr(output, aggregator_fn, TiltseriesMinMaxColumns())
                    else:
                        setattr(output, aggregator_fn, TiltseriesNumericalColumns())
                setattr(getattr(output, aggregator_fn), col_name, value)
    return output


@strawberry.field(extensions=[DependencyExtension()])
async def resolve_tiltseries_aggregate(
    info: Info,
    session: AsyncSession = Depends(get_db_session, use_cache=False),
    authz_client: AuthzClient = Depends(get_authz_client),
    principal: Principal = Depends(require_auth_principal),
    where: Optional[TiltseriesWhereClause] = None,
    # TODO: add support for groupby, limit/offset
) -> TiltseriesAggregate:
    """
    Aggregate values for Tiltseries objects. Used for queries (see graphql_api/queries.py).
    """
    # Get the selected aggregate functions and columns to operate on, and groupby options if any were provided.
    # TODO: not sure why selected_fields is a list
    selections = info.selected_fields[0].selections[0].selections
    aggregate_selections = [selection for selection in selections if selection.name != "groupBy"]
    groupby_selections = [selection for selection in selections if selection.name == "groupBy"]
    groupby_selections = groupby_selections[0].selections if groupby_selections else []

    if not aggregate_selections:
        raise PlatformicsError("No aggregate functions selected")

    rows = await get_aggregate_db_rows(db.Tiltseries, session, authz_client, principal, where, aggregate_selections, [], groupby_selections)  # type: ignore
    aggregate_output = format_tiltseries_aggregate_output(rows)
    return aggregate_output


@strawberry.mutation(extensions=[DependencyExtension()])
async def create_tiltseries(
    input: TiltseriesCreateInput,
    session: AsyncSession = Depends(get_db_session, use_cache=False),
    authz_client: AuthzClient = Depends(get_authz_client),
    principal: Principal = Depends(require_auth_principal),
    is_system_user: bool = Depends(is_system_user),
) -> db.Tiltseries:
    """
    Create a new Tiltseries object. Used for mutations (see graphql_api/mutations.py).
    """
    validated = TiltseriesCreateInputValidator(**input.__dict__)
    params = validated.model_dump()

    # Validate that the user can read all of the entities they're linking to.

    # Validate that the user can read all of the entities they're linking to.
    # Check that run relationship is accessible.
    if validated.run_id:
        run = await get_db_rows(
            db.Run, session, authz_client, principal, {"id": {"_eq": validated.run_id}}, [], AuthzAction.VIEW,
        )
        if not run:
            raise PlatformicsError("Unauthorized: run does not exist")
    # Check that deposition relationship is accessible.
    if validated.deposition_id:
        deposition = await get_db_rows(
            db.Deposition,
            session,
            authz_client,
            principal,
            {"id": {"_eq": validated.deposition_id}},
            [],
            AuthzAction.VIEW,
        )
        if not deposition:
            raise PlatformicsError("Unauthorized: deposition does not exist")

    # Save to DB
    params["owner_user_id"] = int(principal.id)
    new_entity = db.Tiltseries(**params)

    # Are we actually allowed to create this entity?
    if not authz_client.can_create(new_entity, principal):
        raise PlatformicsError("Unauthorized: Cannot create entity")

    session.add(new_entity)
    await session.commit()
    return new_entity


@strawberry.mutation(extensions=[DependencyExtension()])
async def update_tiltseries(
    input: TiltseriesUpdateInput,
    where: TiltseriesWhereClauseMutations,
    session: AsyncSession = Depends(get_db_session, use_cache=False),
    authz_client: AuthzClient = Depends(get_authz_client),
    principal: Principal = Depends(require_auth_principal),
    is_system_user: bool = Depends(is_system_user),
) -> Sequence[db.Tiltseries]:
    """
    Update Tiltseries objects. Used for mutations (see graphql_api/mutations.py).
    """
    validated = TiltseriesUpdateInputValidator(**input.__dict__)
    params = validated.model_dump()

    # Need at least one thing to update
    num_params = len([x for x in params if params[x] is not None])
    if num_params == 0:
        raise PlatformicsError("No fields to update")

    # Validate that the user can read all of the entities they're linking to.
    # Check that run relationship is accessible.
    if validated.run_id:
        run = await get_db_rows(
            db.Run, session, authz_client, principal, {"id": {"_eq": validated.run_id}}, [], AuthzAction.VIEW,
        )
        if not run:
            raise PlatformicsError("Unauthorized: run does not exist")
        params["run"] = run[0]
        del params["run_id"]
    # Check that deposition relationship is accessible.
    if validated.deposition_id:
        deposition = await get_db_rows(
            db.Deposition,
            session,
            authz_client,
            principal,
            {"id": {"_eq": validated.deposition_id}},
            [],
            AuthzAction.VIEW,
        )
        if not deposition:
            raise PlatformicsError("Unauthorized: deposition does not exist")
        params["deposition"] = deposition[0]
        del params["deposition_id"]

    # Fetch entities for update, if we have access to them
    entities = await get_db_rows(db.Tiltseries, session, authz_client, principal, where, [], AuthzAction.UPDATE)
    if len(entities) == 0:
        raise PlatformicsError("Unauthorized: Cannot update entities")

    # Update DB
    updated_at = datetime.datetime.now()
    for entity in entities:
        entity.updated_at = updated_at
        for key in params:
            if params[key] is not None:
                setattr(entity, key, params[key])

    if not authz_client.can_update(entity, principal):
        raise PlatformicsError("Unauthorized: Cannot access new collection")

    await session.commit()
    return entities


@strawberry.mutation(extensions=[DependencyExtension()])
async def delete_tiltseries(
    where: TiltseriesWhereClauseMutations,
    session: AsyncSession = Depends(get_db_session, use_cache=False),
    authz_client: AuthzClient = Depends(get_authz_client),
    principal: Principal = Depends(require_auth_principal),
) -> Sequence[db.Tiltseries]:
    """
    Delete Tiltseries objects. Used for mutations (see graphql_api/mutations.py).
    """
    # Fetch entities for deletion, if we have access to them
    entities = await get_db_rows(db.Tiltseries, session, authz_client, principal, where, [], AuthzAction.DELETE)
    if len(entities) == 0:
        raise PlatformicsError("Unauthorized: Cannot delete entities")

    # Update DB
    for entity in entities:
        await session.delete(entity)
    await session.commit()
    return entities
