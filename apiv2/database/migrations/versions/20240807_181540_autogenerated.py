"""autogenerated

Create Date: 2024-08-07 22:15:44.112015

"""

import sqlalchemy as sa
from alembic import op

# revision identifiers, used by Alembic.
revision = "20240807_181540"
down_revision = None
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "deposition",
        sa.Column("deposition_title", sa.String(), nullable=False),
        sa.Column("deposition_description", sa.String(), nullable=False),
        sa.Column("publications", sa.String(), nullable=True),
        sa.Column("related_database_entries", sa.String(), nullable=True),
        sa.Column("related_database_links", sa.String(), nullable=True),
        sa.Column("dataset_citations", sa.String(), nullable=True),
        sa.Column("deposition_date", sa.DateTime(timezone=True), nullable=False),
        sa.Column("release_date", sa.DateTime(timezone=True), nullable=False),
        sa.Column("last_modified_date", sa.DateTime(timezone=True), nullable=False),
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_deposition")),
    )
    op.create_index(op.f("ix_deposition_id"), "deposition", ["id"], unique=False)
    op.create_table(
        "file",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("entity_id", sa.String(), nullable=False),
        sa.Column("entity_field_name", sa.String(), nullable=False),
        sa.Column("entity_class_name", sa.String(), nullable=False),
        sa.Column(
            "status",
            sa.Enum("SUCCESS", "FAILED", "PENDING", name="filestatus", native_enum=False),
            nullable=False,
        ),
        sa.Column("protocol", sa.Enum("s3", "https", name="fileaccessprotocol", native_enum=False), nullable=False),
        sa.Column("namespace", sa.String(), nullable=False),
        sa.Column("path", sa.String(), nullable=False),
        sa.Column("file_format", sa.String(), nullable=False),
        sa.Column("compression_type", sa.String(), nullable=True),
        sa.Column("size", sa.Integer(), nullable=True),
        sa.Column(
            "upload_client",
            sa.Enum("browser", "cli", "s3", "basespace", name="fileuploadclient", native_enum=False),
            nullable=True,
        ),
        sa.Column("upload_error", sa.String(), nullable=True),
        sa.Column("created_at", sa.DateTime(timezone=True), server_default=sa.text("now()"), nullable=False),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=True),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_file")),
    )
    op.create_table(
        "dataset",
        sa.Column("deposition_id", sa.Integer(), nullable=True),
        sa.Column("title", sa.String(), nullable=False),
        sa.Column("description", sa.String(), nullable=False),
        sa.Column("organism_name", sa.String(), nullable=False),
        sa.Column("organism_taxid", sa.Integer(), nullable=True),
        sa.Column("tissue_name", sa.String(), nullable=True),
        sa.Column("tissue_id", sa.String(), nullable=True),
        sa.Column("cell_name", sa.String(), nullable=True),
        sa.Column("cell_type_id", sa.String(), nullable=True),
        sa.Column("cell_strain_name", sa.String(), nullable=True),
        sa.Column("cell_strain_id", sa.String(), nullable=True),
        sa.Column(
            "sample_type",
            sa.Enum(
                "cell",
                "tissue",
                "organism",
                "organelle",
                "virus",
                "in_vitro",
                "in_silico",
                "other",
                name="sample_type_enum",
                native_enum=False,
            ),
            nullable=True,
        ),
        sa.Column("sample_preparation", sa.String(), nullable=True),
        sa.Column("grid_preparation", sa.String(), nullable=True),
        sa.Column("other_setup", sa.String(), nullable=True),
        sa.Column("key_photo_url", sa.String(), nullable=True),
        sa.Column("key_photo_thumbnail_url", sa.String(), nullable=True),
        sa.Column("cell_component_name", sa.String(), nullable=True),
        sa.Column("cell_component_id", sa.String(), nullable=True),
        sa.Column("deposition_date", sa.DateTime(timezone=True), nullable=False),
        sa.Column("release_date", sa.DateTime(timezone=True), nullable=False),
        sa.Column("last_modified_date", sa.DateTime(timezone=True), nullable=False),
        sa.Column("publications", sa.String(), nullable=True),
        sa.Column("related_database_entries", sa.String(), nullable=True),
        sa.Column("related_database_links", sa.String(), nullable=True),
        sa.Column("dataset_citations", sa.String(), nullable=True),
        sa.Column("s3_prefix", sa.String(), nullable=False),
        sa.Column("https_prefix", sa.String(), nullable=False),
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.ForeignKeyConstraint(["deposition_id"], ["deposition.id"], name=op.f("fk_dataset_deposition_id_deposition")),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_dataset")),
    )
    op.create_index(op.f("ix_dataset_deposition_id"), "dataset", ["deposition_id"], unique=False)
    op.create_index(op.f("ix_dataset_id"), "dataset", ["id"], unique=False)
    op.create_table(
        "deposition_author",
        sa.Column("deposition_id", sa.Integer(), nullable=True),
        sa.Column("author_list_order", sa.Integer(), nullable=False),
        sa.Column("orcid", sa.String(), nullable=True),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("email", sa.String(), nullable=True),
        sa.Column("affiliation_name", sa.String(), nullable=True),
        sa.Column("affiliation_address", sa.String(), nullable=True),
        sa.Column("affiliation_identifier", sa.String(), nullable=True),
        sa.Column("corresponding_author_status", sa.Boolean(), nullable=True),
        sa.Column("primary_author_status", sa.Boolean(), nullable=True),
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.ForeignKeyConstraint(
            ["deposition_id"],
            ["deposition.id"],
            name=op.f("fk_deposition_author_deposition_id_deposition"),
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_deposition_author")),
    )
    op.create_index(op.f("ix_deposition_author_deposition_id"), "deposition_author", ["deposition_id"], unique=False)
    op.create_index(op.f("ix_deposition_author_id"), "deposition_author", ["id"], unique=False)
    op.create_table(
        "deposition_type",
        sa.Column("deposition_id", sa.Integer(), nullable=True),
        sa.Column(
            "type",
            sa.Enum("annotation", "dataset", "tomogram", name="deposition_types_enum", native_enum=False),
            nullable=True,
        ),
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.ForeignKeyConstraint(
            ["deposition_id"],
            ["deposition.id"],
            name=op.f("fk_deposition_type_deposition_id_deposition"),
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_deposition_type")),
    )
    op.create_index(op.f("ix_deposition_type_deposition_id"), "deposition_type", ["deposition_id"], unique=False)
    op.create_index(op.f("ix_deposition_type_id"), "deposition_type", ["id"], unique=False)
    op.create_table(
        "dataset_author",
        sa.Column("dataset_id", sa.Integer(), nullable=True),
        sa.Column("author_list_order", sa.Integer(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("email", sa.String(), nullable=True),
        sa.Column("affiliation_name", sa.String(), nullable=True),
        sa.Column("affiliation_address", sa.String(), nullable=True),
        sa.Column("affiliation_identifier", sa.String(), nullable=True),
        sa.Column("corresponding_author_status", sa.Boolean(), nullable=True),
        sa.Column("primary_author_status", sa.Boolean(), nullable=True),
        sa.Column("orcid", sa.String(), nullable=True),
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.ForeignKeyConstraint(["dataset_id"], ["dataset.id"], name=op.f("fk_dataset_author_dataset_id_dataset")),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_dataset_author")),
    )
    op.create_index(op.f("ix_dataset_author_dataset_id"), "dataset_author", ["dataset_id"], unique=False)
    op.create_index(op.f("ix_dataset_author_id"), "dataset_author", ["id"], unique=False)
    op.create_table(
        "dataset_funding",
        sa.Column("dataset_id", sa.Integer(), nullable=True),
        sa.Column("funding_agency_name", sa.String(), nullable=True),
        sa.Column("grant_id", sa.String(), nullable=True),
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.ForeignKeyConstraint(["dataset_id"], ["dataset.id"], name=op.f("fk_dataset_funding_dataset_id_dataset")),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_dataset_funding")),
    )
    op.create_index(op.f("ix_dataset_funding_dataset_id"), "dataset_funding", ["dataset_id"], unique=False)
    op.create_index(op.f("ix_dataset_funding_id"), "dataset_funding", ["id"], unique=False)
    op.create_table(
        "run",
        sa.Column("dataset_id", sa.Integer(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("s3_prefix", sa.String(), nullable=False),
        sa.Column("https_prefix", sa.String(), nullable=False),
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.ForeignKeyConstraint(["dataset_id"], ["dataset.id"], name=op.f("fk_run_dataset_id_dataset")),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_run")),
    )
    op.create_index(op.f("ix_run_dataset_id"), "run", ["dataset_id"], unique=False)
    op.create_index(op.f("ix_run_id"), "run", ["id"], unique=False)
    op.create_table(
        "annotation",
        sa.Column("run_id", sa.Integer(), nullable=True),
        sa.Column("deposition_id", sa.Integer(), nullable=True),
        sa.Column("s3_metadata_path", sa.String(), nullable=False),
        sa.Column("https_metadata_path", sa.String(), nullable=False),
        sa.Column("annotation_publication", sa.String(), nullable=True),
        sa.Column("annotation_method", sa.String(), nullable=False),
        sa.Column("ground_truth_status", sa.Boolean(), nullable=True),
        sa.Column("object_id", sa.String(), nullable=False),
        sa.Column("object_name", sa.String(), nullable=False),
        sa.Column("object_description", sa.String(), nullable=True),
        sa.Column("object_state", sa.String(), nullable=True),
        sa.Column("object_count", sa.Integer(), nullable=True),
        sa.Column("confidence_precision", sa.Float(), nullable=True),
        sa.Column("confidence_recall", sa.Float(), nullable=True),
        sa.Column("ground_truth_used", sa.String(), nullable=True),
        sa.Column("annotation_software", sa.String(), nullable=True),
        sa.Column("is_curator_recommended", sa.Boolean(), nullable=True),
        sa.Column(
            "method_type",
            sa.Enum("manual", "automated", "hybrid", name="annotation_method_type_enum", native_enum=False),
            nullable=False,
        ),
        sa.Column("deposition_date", sa.DateTime(timezone=True), nullable=False),
        sa.Column("release_date", sa.DateTime(timezone=True), nullable=False),
        sa.Column("last_modified_date", sa.DateTime(timezone=True), nullable=False),
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.ForeignKeyConstraint(
            ["deposition_id"],
            ["deposition.id"],
            name=op.f("fk_annotation_deposition_id_deposition"),
        ),
        sa.ForeignKeyConstraint(["run_id"], ["run.id"], name=op.f("fk_annotation_run_id_run")),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_annotation")),
    )
    op.create_index(op.f("ix_annotation_deposition_id"), "annotation", ["deposition_id"], unique=False)
    op.create_index(op.f("ix_annotation_id"), "annotation", ["id"], unique=False)
    op.create_index(op.f("ix_annotation_run_id"), "annotation", ["run_id"], unique=False)
    op.create_table(
        "frame",
        sa.Column("deposition_id", sa.Integer(), nullable=True),
        sa.Column("run_id", sa.Integer(), nullable=True),
        sa.Column("raw_angle", sa.Float(), nullable=False),
        sa.Column("acquisition_order", sa.Integer(), nullable=True),
        sa.Column("dose", sa.Float(), nullable=False),
        sa.Column("is_gain_corrected", sa.Boolean(), nullable=True),
        sa.Column("s3_gain_file", sa.String(), nullable=True),
        sa.Column("https_gain_file", sa.String(), nullable=True),
        sa.Column("s3_prefix", sa.String(), nullable=False),
        sa.Column("https_prefix", sa.String(), nullable=False),
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.ForeignKeyConstraint(["deposition_id"], ["deposition.id"], name=op.f("fk_frame_deposition_id_deposition")),
        sa.ForeignKeyConstraint(["run_id"], ["run.id"], name=op.f("fk_frame_run_id_run")),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_frame")),
    )
    op.create_index(op.f("ix_frame_deposition_id"), "frame", ["deposition_id"], unique=False)
    op.create_index(op.f("ix_frame_id"), "frame", ["id"], unique=False)
    op.create_index(op.f("ix_frame_run_id"), "frame", ["run_id"], unique=False)
    op.create_table(
        "tiltseries",
        sa.Column("run_id", sa.Integer(), nullable=False),
        sa.Column("deposition_id", sa.Integer(), nullable=True),
        sa.Column("s3_omezarr_dir", sa.String(), nullable=True),
        sa.Column("s3_mrc_bin1", sa.String(), nullable=True),
        sa.Column("https_omezarr_dir", sa.String(), nullable=True),
        sa.Column("https_mrc_bin1", sa.String(), nullable=True),
        sa.Column("s3_collection_metadata", sa.String(), nullable=True),
        sa.Column("https_collection_metadata", sa.String(), nullable=True),
        sa.Column("s3_angle_list", sa.String(), nullable=True),
        sa.Column("https_angle_list", sa.String(), nullable=True),
        sa.Column("s3_gain_file", sa.String(), nullable=True),
        sa.Column("https_gain_file", sa.String(), nullable=True),
        sa.Column("acceleration_voltage", sa.Float(), nullable=False),
        sa.Column("spherical_aberration_constant", sa.Float(), nullable=False),
        sa.Column(
            "microscope_manufacturer",
            sa.Enum("FEI", "TFS", "JEOL", name="tiltseries_microscope_manufacturer_enum", native_enum=False),
            nullable=False,
        ),
        sa.Column("microscope_model", sa.String(), nullable=False),
        sa.Column("microscope_energy_filter", sa.String(), nullable=False),
        sa.Column("microscope_phase_plate", sa.String(), nullable=True),
        sa.Column("microscope_image_corrector", sa.String(), nullable=True),
        sa.Column("microscope_additional_info", sa.String(), nullable=True),
        sa.Column("camera_manufacturer", sa.String(), nullable=False),
        sa.Column("camera_model", sa.String(), nullable=False),
        sa.Column("tilt_min", sa.Float(), nullable=False),
        sa.Column("tilt_max", sa.Float(), nullable=False),
        sa.Column("tilt_range", sa.Float(), nullable=False),
        sa.Column("tilt_step", sa.Float(), nullable=False),
        sa.Column("tilting_scheme", sa.String(), nullable=False),
        sa.Column("tilt_axis", sa.Float(), nullable=False),
        sa.Column("total_flux", sa.Float(), nullable=False),
        sa.Column("data_acquisition_software", sa.String(), nullable=False),
        sa.Column("related_empiar_entry", sa.String(), nullable=True),
        sa.Column("binning_from_frames", sa.Float(), nullable=True),
        sa.Column("tilt_series_quality", sa.Integer(), nullable=False),
        sa.Column("is_aligned", sa.Boolean(), nullable=False),
        sa.Column("pixel_spacing", sa.Float(), nullable=False),
        sa.Column("aligned_tiltseries_binning", sa.Float(), nullable=True),
        sa.Column("tiltseries_frames_count", sa.Integer(), nullable=True),
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.ForeignKeyConstraint(
            ["deposition_id"],
            ["deposition.id"],
            name=op.f("fk_tiltseries_deposition_id_deposition"),
        ),
        sa.ForeignKeyConstraint(["run_id"], ["run.id"], name=op.f("fk_tiltseries_run_id_run")),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_tiltseries")),
    )
    op.create_index(op.f("ix_tiltseries_deposition_id"), "tiltseries", ["deposition_id"], unique=False)
    op.create_index(op.f("ix_tiltseries_id"), "tiltseries", ["id"], unique=False)
    op.create_index(op.f("ix_tiltseries_run_id"), "tiltseries", ["run_id"], unique=False)
    op.create_table(
        "tomogram_voxel_spacing",
        sa.Column("run_id", sa.Integer(), nullable=True),
        sa.Column("voxel_spacing", sa.Float(), nullable=False),
        sa.Column("s3_prefix", sa.String(), nullable=False),
        sa.Column("https_prefix", sa.String(), nullable=False),
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.ForeignKeyConstraint(["run_id"], ["run.id"], name=op.f("fk_tomogram_voxel_spacing_run_id_run")),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_tomogram_voxel_spacing")),
    )
    op.create_index(op.f("ix_tomogram_voxel_spacing_id"), "tomogram_voxel_spacing", ["id"], unique=False)
    op.create_index(op.f("ix_tomogram_voxel_spacing_run_id"), "tomogram_voxel_spacing", ["run_id"], unique=False)
    op.create_table(
        "alignment",
        sa.Column("deposition_id", sa.Integer(), nullable=True),
        sa.Column("tiltseries_id", sa.Integer(), nullable=True),
        sa.Column("run_id", sa.Integer(), nullable=True),
        sa.Column("alignment", sa.String(), nullable=False),
        sa.Column(
            "alignment_type",
            sa.Enum("LOCAL", "GLOBAL", name="alignment_type_enum", native_enum=False),
            nullable=True,
        ),
        sa.Column("volume_x_dimension", sa.Float(), nullable=True),
        sa.Column("volume_y_dimension", sa.Float(), nullable=True),
        sa.Column("volume_z_dimension", sa.Float(), nullable=True),
        sa.Column("volume_x_offset", sa.Float(), nullable=True),
        sa.Column("volume_y_offset", sa.Float(), nullable=True),
        sa.Column("volume_z_offset", sa.Float(), nullable=True),
        sa.Column("volume_x_rotation", sa.Float(), nullable=True),
        sa.Column("tilt_offset", sa.Float(), nullable=True),
        sa.Column("local_alignment_file", sa.String(), nullable=True),
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.ForeignKeyConstraint(
            ["deposition_id"],
            ["deposition.id"],
            name=op.f("fk_alignment_deposition_id_deposition"),
        ),
        sa.ForeignKeyConstraint(["run_id"], ["run.id"], name=op.f("fk_alignment_run_id_run")),
        sa.ForeignKeyConstraint(
            ["tiltseries_id"],
            ["tiltseries.id"],
            name=op.f("fk_alignment_tiltseries_id_tiltseries"),
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_alignment")),
    )
    op.create_index(op.f("ix_alignment_deposition_id"), "alignment", ["deposition_id"], unique=False)
    op.create_index(op.f("ix_alignment_id"), "alignment", ["id"], unique=False)
    op.create_index(op.f("ix_alignment_run_id"), "alignment", ["run_id"], unique=False)
    op.create_index(op.f("ix_alignment_tiltseries_id"), "alignment", ["tiltseries_id"], unique=False)
    op.create_table(
        "annotation_author",
        sa.Column("annotation_id", sa.Integer(), nullable=True),
        sa.Column("author_list_order", sa.Integer(), nullable=False),
        sa.Column("orcid", sa.String(), nullable=True),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("email", sa.String(), nullable=True),
        sa.Column("affiliation_name", sa.String(), nullable=True),
        sa.Column("affiliation_address", sa.String(), nullable=True),
        sa.Column("affiliation_identifier", sa.String(), nullable=True),
        sa.Column("corresponding_author_status", sa.Boolean(), nullable=True),
        sa.Column("primary_author_status", sa.Boolean(), nullable=True),
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.ForeignKeyConstraint(
            ["annotation_id"],
            ["annotation.id"],
            name=op.f("fk_annotation_author_annotation_id_annotation"),
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_annotation_author")),
    )
    op.create_index(op.f("ix_annotation_author_annotation_id"), "annotation_author", ["annotation_id"], unique=False)
    op.create_index(op.f("ix_annotation_author_id"), "annotation_author", ["id"], unique=False)
    op.create_table(
        "annotation_shape",
        sa.Column("annotation_id", sa.Integer(), nullable=True),
        sa.Column(
            "shape_type",
            sa.Enum(
                "SegmentationMask",
                "OrientedPoint",
                "Point",
                "InstanceSegmentation",
                name="annotation_file_shape_type_enum",
                native_enum=False,
            ),
            nullable=True,
        ),
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.ForeignKeyConstraint(
            ["annotation_id"],
            ["annotation.id"],
            name=op.f("fk_annotation_shape_annotation_id_annotation"),
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_annotation_shape")),
    )
    op.create_index(op.f("ix_annotation_shape_annotation_id"), "annotation_shape", ["annotation_id"], unique=False)
    op.create_index(op.f("ix_annotation_shape_id"), "annotation_shape", ["id"], unique=False)
    op.create_table(
        "per_section_parameters",
        sa.Column("frame_id", sa.Integer(), nullable=False),
        sa.Column("tiltseries_id", sa.Integer(), nullable=False),
        sa.Column("z_index", sa.Integer(), nullable=False),
        sa.Column("defocus", sa.Float(), nullable=True),
        sa.Column("astigmatism", sa.Float(), nullable=True),
        sa.Column("astigmatic_angle", sa.Float(), nullable=True),
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.ForeignKeyConstraint(["frame_id"], ["frame.id"], name=op.f("fk_per_section_parameters_frame_id_frame")),
        sa.ForeignKeyConstraint(
            ["tiltseries_id"],
            ["tiltseries.id"],
            name=op.f("fk_per_section_parameters_tiltseries_id_tiltseries"),
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_per_section_parameters")),
    )
    op.create_index(op.f("ix_per_section_parameters_frame_id"), "per_section_parameters", ["frame_id"], unique=False)
    op.create_index(op.f("ix_per_section_parameters_id"), "per_section_parameters", ["id"], unique=False)
    op.create_index(
        op.f("ix_per_section_parameters_tiltseries_id"),
        "per_section_parameters",
        ["tiltseries_id"],
        unique=False,
    )
    op.create_table(
        "annotation_file",
        sa.Column("alignment_id", sa.Integer(), nullable=True),
        sa.Column("annotation_shape_id", sa.Integer(), nullable=True),
        sa.Column("tomogram_voxel_spacing_id", sa.Integer(), nullable=True),
        sa.Column("format", sa.String(), nullable=False),
        sa.Column("s3_path", sa.String(), nullable=False),
        sa.Column("https_path", sa.String(), nullable=False),
        sa.Column("is_visualization_default", sa.Boolean(), nullable=True),
        sa.Column(
            "source",
            sa.Enum(
                "dataset_author",
                "community",
                "portal_standard",
                name="annotation_file_source_enum",
                native_enum=False,
            ),
            nullable=True,
        ),
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.ForeignKeyConstraint(
            ["alignment_id"],
            ["alignment.id"],
            name=op.f("fk_annotation_file_alignment_id_alignment"),
        ),
        sa.ForeignKeyConstraint(
            ["annotation_shape_id"],
            ["annotation_shape.id"],
            name=op.f("fk_annotation_file_annotation_shape_id_annotation_shape"),
        ),
        sa.ForeignKeyConstraint(
            ["tomogram_voxel_spacing_id"],
            ["tomogram_voxel_spacing.id"],
            name=op.f("fk_annotation_file_tomogram_voxel_spacing_id_tomogram_voxel_spacing"),
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_annotation_file")),
    )
    op.create_index(op.f("ix_annotation_file_alignment_id"), "annotation_file", ["alignment_id"], unique=False)
    op.create_index(
        op.f("ix_annotation_file_annotation_shape_id"),
        "annotation_file",
        ["annotation_shape_id"],
        unique=False,
    )
    op.create_index(op.f("ix_annotation_file_id"), "annotation_file", ["id"], unique=False)
    op.create_index(
        op.f("ix_annotation_file_tomogram_voxel_spacing_id"),
        "annotation_file",
        ["tomogram_voxel_spacing_id"],
        unique=False,
    )
    op.create_table(
        "per_section_alignment_parameters",
        sa.Column("alignment_id", sa.Integer(), nullable=False),
        sa.Column("z_index", sa.Integer(), nullable=False),
        sa.Column("x_offset", sa.Float(), nullable=True),
        sa.Column("y_offset", sa.Float(), nullable=True),
        sa.Column("in_plane_rotation", sa.Float(), nullable=True),
        sa.Column("beam_tilt", sa.Float(), nullable=True),
        sa.Column("tilt_angle", sa.Float(), nullable=True),
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.ForeignKeyConstraint(
            ["alignment_id"],
            ["alignment.id"],
            name=op.f("fk_per_section_alignment_parameters_alignment_id_alignment"),
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_per_section_alignment_parameters")),
    )
    op.create_index(
        op.f("ix_per_section_alignment_parameters_alignment_id"),
        "per_section_alignment_parameters",
        ["alignment_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_per_section_alignment_parameters_id"),
        "per_section_alignment_parameters",
        ["id"],
        unique=False,
    )
    op.create_table(
        "tomogram",
        sa.Column("alignment_id", sa.Integer(), nullable=True),
        sa.Column("deposition_id", sa.Integer(), nullable=True),
        sa.Column("run_id", sa.Integer(), nullable=True),
        sa.Column("tomogram_voxel_spacing_id", sa.Integer(), nullable=True),
        sa.Column("name", sa.String(), nullable=True),
        sa.Column("size_x", sa.Float(), nullable=False),
        sa.Column("size_y", sa.Float(), nullable=False),
        sa.Column("size_z", sa.Float(), nullable=False),
        sa.Column("voxel_spacing", sa.Float(), nullable=False),
        sa.Column(
            "fiducial_alignment_status",
            sa.Enum("FIDUCIAL", "NON_FIDUCIAL", name="fiducial_alignment_status_enum", native_enum=False),
            nullable=False,
        ),
        sa.Column(
            "reconstruction_method",
            sa.Enum(
                "SART",
                "Fourier_Space",
                "SIRT",
                "WBP",
                "Unknown",
                name="tomogram_reconstruction_method_enum",
                native_enum=False,
            ),
            nullable=False,
        ),
        sa.Column(
            "processing",
            sa.Enum("denoised", "filtered", "raw", name="tomogram_processing_enum", native_enum=False),
            nullable=False,
        ),
        sa.Column("tomogram_version", sa.Float(), nullable=True),
        sa.Column("processing_software", sa.String(), nullable=True),
        sa.Column("reconstruction_software", sa.String(), nullable=False),
        sa.Column("is_canonical", sa.Boolean(), nullable=True),
        sa.Column("s3_omezarr_dir", sa.String(), nullable=True),
        sa.Column("https_omezarr_dir", sa.String(), nullable=True),
        sa.Column("s3_mrc_scale0", sa.String(), nullable=True),
        sa.Column("https_mrc_scale0", sa.String(), nullable=True),
        sa.Column("scale0_dimensions", sa.String(), nullable=True),
        sa.Column("scale1_dimensions", sa.String(), nullable=True),
        sa.Column("scale2_dimensions", sa.String(), nullable=True),
        sa.Column("ctf_corrected", sa.Boolean(), nullable=True),
        sa.Column("offset_x", sa.Integer(), nullable=False),
        sa.Column("offset_y", sa.Integer(), nullable=False),
        sa.Column("offset_z", sa.Integer(), nullable=False),
        sa.Column("affine_transformation_matrix", sa.String(), nullable=True),
        sa.Column("key_photo_url", sa.String(), nullable=True),
        sa.Column("key_photo_thumbnail_url", sa.String(), nullable=True),
        sa.Column("neuroglancer_config", sa.String(), nullable=True),
        sa.Column(
            "tomogram_type",
            sa.Enum("CANONICAL", "UNKNOWN", name="tomogram_type_enum", native_enum=False),
            nullable=True,
        ),
        sa.Column("is_standardized", sa.Boolean(), nullable=False),
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.ForeignKeyConstraint(["alignment_id"], ["alignment.id"], name=op.f("fk_tomogram_alignment_id_alignment")),
        sa.ForeignKeyConstraint(
            ["deposition_id"],
            ["deposition.id"],
            name=op.f("fk_tomogram_deposition_id_deposition"),
        ),
        sa.ForeignKeyConstraint(["run_id"], ["run.id"], name=op.f("fk_tomogram_run_id_run")),
        sa.ForeignKeyConstraint(
            ["tomogram_voxel_spacing_id"],
            ["tomogram_voxel_spacing.id"],
            name=op.f("fk_tomogram_tomogram_voxel_spacing_id_tomogram_voxel_spacing"),
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_tomogram")),
    )
    op.create_index(op.f("ix_tomogram_alignment_id"), "tomogram", ["alignment_id"], unique=False)
    op.create_index(op.f("ix_tomogram_deposition_id"), "tomogram", ["deposition_id"], unique=False)
    op.create_index(op.f("ix_tomogram_id"), "tomogram", ["id"], unique=False)
    op.create_index(op.f("ix_tomogram_run_id"), "tomogram", ["run_id"], unique=False)
    op.create_index(
        op.f("ix_tomogram_tomogram_voxel_spacing_id"),
        "tomogram",
        ["tomogram_voxel_spacing_id"],
        unique=False,
    )
    op.create_table(
        "tomogram_author",
        sa.Column("tomogram_id", sa.Integer(), nullable=True),
        sa.Column("author_list_order", sa.Integer(), nullable=False),
        sa.Column("orcid", sa.String(), nullable=True),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("email", sa.String(), nullable=True),
        sa.Column("affiliation_name", sa.String(), nullable=True),
        sa.Column("affiliation_address", sa.String(), nullable=True),
        sa.Column("affiliation_identifier", sa.String(), nullable=True),
        sa.Column("corresponding_author_status", sa.Boolean(), nullable=True),
        sa.Column("primary_author_status", sa.Boolean(), nullable=True),
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.ForeignKeyConstraint(["tomogram_id"], ["tomogram.id"], name=op.f("fk_tomogram_author_tomogram_id_tomogram")),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_tomogram_author")),
    )
    op.create_index(op.f("ix_tomogram_author_id"), "tomogram_author", ["id"], unique=False)
    op.create_index(op.f("ix_tomogram_author_tomogram_id"), "tomogram_author", ["tomogram_id"], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f("ix_tomogram_author_tomogram_id"), table_name="tomogram_author")
    op.drop_index(op.f("ix_tomogram_author_id"), table_name="tomogram_author")
    op.drop_table("tomogram_author")
    op.drop_index(op.f("ix_tomogram_tomogram_voxel_spacing_id"), table_name="tomogram")
    op.drop_index(op.f("ix_tomogram_run_id"), table_name="tomogram")
    op.drop_index(op.f("ix_tomogram_id"), table_name="tomogram")
    op.drop_index(op.f("ix_tomogram_deposition_id"), table_name="tomogram")
    op.drop_index(op.f("ix_tomogram_alignment_id"), table_name="tomogram")
    op.drop_table("tomogram")
    op.drop_index(op.f("ix_per_section_alignment_parameters_id"), table_name="per_section_alignment_parameters")
    op.drop_index(
        op.f("ix_per_section_alignment_parameters_alignment_id"),
        table_name="per_section_alignment_parameters",
    )
    op.drop_table("per_section_alignment_parameters")
    op.drop_index(op.f("ix_annotation_file_tomogram_voxel_spacing_id"), table_name="annotation_file")
    op.drop_index(op.f("ix_annotation_file_id"), table_name="annotation_file")
    op.drop_index(op.f("ix_annotation_file_annotation_shape_id"), table_name="annotation_file")
    op.drop_index(op.f("ix_annotation_file_alignment_id"), table_name="annotation_file")
    op.drop_table("annotation_file")
    op.drop_index(op.f("ix_per_section_parameters_tiltseries_id"), table_name="per_section_parameters")
    op.drop_index(op.f("ix_per_section_parameters_id"), table_name="per_section_parameters")
    op.drop_index(op.f("ix_per_section_parameters_frame_id"), table_name="per_section_parameters")
    op.drop_table("per_section_parameters")
    op.drop_index(op.f("ix_annotation_shape_id"), table_name="annotation_shape")
    op.drop_index(op.f("ix_annotation_shape_annotation_id"), table_name="annotation_shape")
    op.drop_table("annotation_shape")
    op.drop_index(op.f("ix_annotation_author_id"), table_name="annotation_author")
    op.drop_index(op.f("ix_annotation_author_annotation_id"), table_name="annotation_author")
    op.drop_table("annotation_author")
    op.drop_index(op.f("ix_alignment_tiltseries_id"), table_name="alignment")
    op.drop_index(op.f("ix_alignment_run_id"), table_name="alignment")
    op.drop_index(op.f("ix_alignment_id"), table_name="alignment")
    op.drop_index(op.f("ix_alignment_deposition_id"), table_name="alignment")
    op.drop_table("alignment")
    op.drop_index(op.f("ix_tomogram_voxel_spacing_run_id"), table_name="tomogram_voxel_spacing")
    op.drop_index(op.f("ix_tomogram_voxel_spacing_id"), table_name="tomogram_voxel_spacing")
    op.drop_table("tomogram_voxel_spacing")
    op.drop_index(op.f("ix_tiltseries_run_id"), table_name="tiltseries")
    op.drop_index(op.f("ix_tiltseries_id"), table_name="tiltseries")
    op.drop_index(op.f("ix_tiltseries_deposition_id"), table_name="tiltseries")
    op.drop_table("tiltseries")
    op.drop_index(op.f("ix_frame_run_id"), table_name="frame")
    op.drop_index(op.f("ix_frame_id"), table_name="frame")
    op.drop_index(op.f("ix_frame_deposition_id"), table_name="frame")
    op.drop_table("frame")
    op.drop_index(op.f("ix_annotation_run_id"), table_name="annotation")
    op.drop_index(op.f("ix_annotation_id"), table_name="annotation")
    op.drop_index(op.f("ix_annotation_deposition_id"), table_name="annotation")
    op.drop_table("annotation")
    op.drop_index(op.f("ix_run_id"), table_name="run")
    op.drop_index(op.f("ix_run_dataset_id"), table_name="run")
    op.drop_table("run")
    op.drop_index(op.f("ix_dataset_funding_id"), table_name="dataset_funding")
    op.drop_index(op.f("ix_dataset_funding_dataset_id"), table_name="dataset_funding")
    op.drop_table("dataset_funding")
    op.drop_index(op.f("ix_dataset_author_id"), table_name="dataset_author")
    op.drop_index(op.f("ix_dataset_author_dataset_id"), table_name="dataset_author")
    op.drop_table("dataset_author")
    op.drop_index(op.f("ix_deposition_type_id"), table_name="deposition_type")
    op.drop_index(op.f("ix_deposition_type_deposition_id"), table_name="deposition_type")
    op.drop_table("deposition_type")
    op.drop_index(op.f("ix_deposition_author_id"), table_name="deposition_author")
    op.drop_index(op.f("ix_deposition_author_deposition_id"), table_name="deposition_author")
    op.drop_table("deposition_author")
    op.drop_index(op.f("ix_dataset_id"), table_name="dataset")
    op.drop_index(op.f("ix_dataset_deposition_id"), table_name="dataset")
    op.drop_table("dataset")
    op.drop_table("file")
    op.drop_index(op.f("ix_deposition_id"), table_name="deposition")
    op.drop_table("deposition")
    # ### end Alembic commands ###
