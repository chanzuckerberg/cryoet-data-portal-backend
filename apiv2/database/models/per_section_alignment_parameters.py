"""
SQLAlchemy database model for PerSectionAlignmentParameters

Auto-generated by running 'make codegen'. Do not edit.
Make changes to the template codegen/templates/database/models/class_name.py.j2 instead.
"""

import uuid
import uuid6
import datetime
from typing import TYPE_CHECKING

from platformics.database.models.base import Base
from sqlalchemy import ForeignKey, String, Float, Integer, Enum, Boolean, DateTime
from sqlalchemy.dialects.postgresql import UUID, JSONB
from sqlalchemy.orm import Mapped, mapped_column, relationship
from sqlalchemy.sql import func
from platformics.database.models.file import File

if TYPE_CHECKING:
    from platformics.database.models.file import File
    from database.models.alignment import Alignment

    ...
else:
    File = "File"
    Alignment = "Alignment"
    ...


class PerSectionAlignmentParameters(Base):
    __tablename__ = "per_section_alignment_parameters"
    __mapper_args__ = {"polymorphic_identity": __tablename__, "polymorphic_load": "inline"}

    alignment_id: Mapped[int] = mapped_column(Integer, ForeignKey("alignment.id"), nullable=False, index=True)
    alignment: Mapped["Alignment"] = relationship(
        "Alignment",
        foreign_keys=alignment_id,
        back_populates="per_section_alignments",
    )
    z_index: Mapped[int] = mapped_column(Integer, nullable=False)
    x_offset: Mapped[float] = mapped_column(Float, nullable=True)
    y_offset: Mapped[float] = mapped_column(Float, nullable=True)
    volume_x_rotation: Mapped[float] = mapped_column(Float, nullable=True)
    in_plane_rotation: Mapped[JSONB] = mapped_column(JSONB, nullable=True)
    tilt_angle: Mapped[float] = mapped_column(Float, nullable=True)
    id: Mapped[int] = mapped_column(Integer, nullable=False, index=True, autoincrement=True, primary_key=True)
