"""
SQLAlchemy database model for Alignment

Auto-generated by running 'make codegen'. Do not edit.
Make changes to the template codegen/templates/database/models/class_name.py.j2 instead.
"""

from typing import TYPE_CHECKING

from sqlalchemy import Enum, Float, ForeignKey, Integer, String
from sqlalchemy.orm import Mapped, mapped_column, relationship
from support.enums import alignment_type_enum

from platformics.database.models.base import Base
from platformics.database.models.file import File

if TYPE_CHECKING:
    from database.models.annotation_file import AnnotationFile
    from database.models.deposition import Deposition
    from database.models.per_section_alignment_parameters import PerSectionAlignmentParameters
    from database.models.run import Run
    from database.models.tiltseries import Tiltseries
    from database.models.tomogram import Tomogram

    from platformics.database.models.file import File

    ...
else:
    File = "File"
    AnnotationFile = "AnnotationFile"
    PerSectionAlignmentParameters = "PerSectionAlignmentParameters"
    Deposition = "Deposition"
    Tiltseries = "Tiltseries"
    Tomogram = "Tomogram"
    Run = "Run"
    ...


class Alignment(Base):
    __tablename__ = "alignment"
    __mapper_args__ = {"polymorphic_identity": __tablename__, "polymorphic_load": "inline"}

    annotation_files: Mapped[list[AnnotationFile]] = relationship(
        "AnnotationFile",
        back_populates="alignment",
        uselist=True,
        foreign_keys="AnnotationFile.alignment_id",
    )
    per_section_alignments: Mapped[list[PerSectionAlignmentParameters]] = relationship(
        "PerSectionAlignmentParameters",
        back_populates="alignment",
        uselist=True,
        foreign_keys="PerSectionAlignmentParameters.alignment_id",
    )
    deposition_id: Mapped[int] = mapped_column(Integer, ForeignKey("deposition.id"), nullable=True, index=True)
    deposition: Mapped["Deposition"] = relationship(
        "Deposition",
        foreign_keys=deposition_id,
        back_populates="alignments",
    )
    tiltseries_id: Mapped[int] = mapped_column(Integer, ForeignKey("tiltseries.id"), nullable=True, index=True)
    tiltseries: Mapped["Tiltseries"] = relationship(
        "Tiltseries",
        foreign_keys=tiltseries_id,
        back_populates="alignments",
    )
    tomograms: Mapped[list[Tomogram]] = relationship(
        "Tomogram",
        back_populates="alignment",
        uselist=True,
        foreign_keys="Tomogram.alignment_id",
    )
    run_id: Mapped[int] = mapped_column(Integer, ForeignKey("run.id"), nullable=True, index=True)
    run: Mapped["Run"] = relationship(
        "Run",
        foreign_keys=run_id,
        back_populates="alignments",
    )
    alignment_type: Mapped[alignment_type_enum] = mapped_column(
        Enum(alignment_type_enum, native_enum=False), nullable=True,
    )
    volume_x_dimension: Mapped[float] = mapped_column(Float, nullable=True)
    volume_y_dimension: Mapped[float] = mapped_column(Float, nullable=True)
    volume_z_dimension: Mapped[float] = mapped_column(Float, nullable=True)
    volume_x_offset: Mapped[float] = mapped_column(Float, nullable=True)
    volume_y_offset: Mapped[float] = mapped_column(Float, nullable=True)
    volume_z_offset: Mapped[float] = mapped_column(Float, nullable=True)
    x_rotation_offset: Mapped[float] = mapped_column(Float, nullable=True)
    tilt_offset: Mapped[float] = mapped_column(Float, nullable=True)
    local_alignment_file: Mapped[str] = mapped_column(String, nullable=True)
    affine_transformation_matrix: Mapped[str] = mapped_column(String, nullable=True)
    id: Mapped[int] = mapped_column(Integer, nullable=False, index=True, autoincrement=True, primary_key=True)
