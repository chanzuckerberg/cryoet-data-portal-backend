{
    "$defs": {
        "Alignment": {
            "additionalProperties": false,
            "description": "",
            "properties": {
                "affine_transformation_matrix": {
                    "items": {
                        "additionalProperties": true,
                        "type": [
                            "null",
                            "boolean",
                            "object",
                            "number",
                            "string",
                            "array"
                        ]
                    },
                    "type": [
                        "array",
                        "null"
                    ]
                },
                "alignment_type": {
                    "$ref": "#/$defs/AlignmentTypeEnum",
                    "description": "The type of alignment.",
                    "pattern": "(^LOCAL$)|(^GLOBAL$)"
                },
                "format": {
                    "$ref": "#/$defs/AlignmentFormatEnum",
                    "description": "The format of the alignment.",
                    "pattern": "(^IMOD$)|(^ARETOMO3$)"
                },
                "is_portal_standard": {
                    "description": "Whether the alignment is standardized for the portal.",
                    "type": [
                        "boolean",
                        "null"
                    ]
                },
                "method_type": {
                    "$ref": "#/$defs/AlignmentMethodTypeEnum",
                    "description": "The alignment method type.",
                    "pattern": "(^fiducial_based$)|(^patch_tracking$)|(^projection_matching$)|(^undefined$)"
                },
                "offset": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/AlignmentOffset"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "description": "The offset of a alignment in voxels in each dimension relative to the canonical tomogram."
                },
                "tilt_offset": {
                    "description": "The tilt offset relative to the tomogram.",
                    "type": [
                        "number",
                        "null"
                    ]
                },
                "volume_dimension": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/AlignmentSize"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "description": "The size of an alignment in voxels in each dimension."
                },
                "x_rotation_offset": {
                    "anyOf": [
                        {
                            "type": "integer"
                        },
                        {
                            "pattern": "^int[ ]*\\{[a-zA-Z0-9_-]+\\}[ ]*$",
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "description": "The x rotation offset relative to the tomogram.",
                    "pattern": "^int[ ]*\\{[a-zA-Z0-9_-]+\\}[ ]*$"
                }
            },
            "required": [
                "format"
            ],
            "title": "Alignment",
            "type": "object"
        },
        "AlignmentEntity": {
            "additionalProperties": false,
            "description": "An alignment entity.",
            "properties": {
                "metadata": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/Alignment"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "description": "The metadata for the alignment."
                },
                "sources": {
                    "description": "An alignment source.",
                    "items": {
                        "$ref": "#/$defs/AlignmentSource"
                    },
                    "type": [
                        "array",
                        "null"
                    ]
                }
            },
            "title": "AlignmentEntity",
            "type": "object"
        },
        "AlignmentFormatEnum": {
            "description": "Used to determine what alignment alogrithm to use.",
            "enum": [
                "IMOD",
                "ARETOMO3"
            ],
            "title": "AlignmentFormatEnum",
            "type": "string"
        },
        "AlignmentMethodTypeEnum": {
            "description": "Used to determine how the alignment was done.",
            "enum": [
                "fiducial_based",
                "patch_tracking",
                "projection_matching",
                "undefined"
            ],
            "title": "AlignmentMethodTypeEnum",
            "type": "string"
        },
        "AlignmentOffset": {
            "additionalProperties": false,
            "description": "The offset of a alignment in voxels in each dimension relative to the canonical tomogram.",
            "properties": {
                "x": {
                    "$ref": "#/$defs/Any",
                    "anyOf": [
                        {
                            "type": "integer"
                        },
                        {
                            "pattern": "^int[ ]*\\{[a-zA-Z0-9_-]+\\}[ ]*$",
                            "type": "string"
                        }
                    ],
                    "description": "x offset relative to the canonical tomogram in pixels",
                    "pattern": "^int[ ]*\\{[a-zA-Z0-9_-]+\\}[ ]*$"
                },
                "y": {
                    "$ref": "#/$defs/Any",
                    "anyOf": [
                        {
                            "type": "integer"
                        },
                        {
                            "pattern": "^int[ ]*\\{[a-zA-Z0-9_-]+\\}[ ]*$",
                            "type": "string"
                        }
                    ],
                    "description": "y offset relative to the canonical tomogram in pixels",
                    "pattern": "^int[ ]*\\{[a-zA-Z0-9_-]+\\}[ ]*$"
                },
                "z": {
                    "$ref": "#/$defs/Any",
                    "anyOf": [
                        {
                            "type": "integer"
                        },
                        {
                            "pattern": "^int[ ]*\\{[a-zA-Z0-9_-]+\\}[ ]*$",
                            "type": "string"
                        }
                    ],
                    "description": "z offset relative to the canonical tomogram in pixels",
                    "pattern": "^int[ ]*\\{[a-zA-Z0-9_-]+\\}[ ]*$"
                }
            },
            "required": [
                "x",
                "y",
                "z"
            ],
            "title": "AlignmentOffset",
            "type": "object"
        },
        "AlignmentParent": {
            "additionalProperties": false,
            "description": "A filter for a parent class of an alignment source. For a given attribute, it can only be used if the current class is a subclass of the attribute.",
            "properties": {
                "dataset": {
                    "description": "Include or exclude datasets for a source.",
                    "items": {
                        "type": "string"
                    },
                    "type": [
                        "array",
                        "null"
                    ]
                },
                "deposition": {
                    "description": "Include or exclude depositions for a source.",
                    "items": {
                        "type": "string"
                    },
                    "type": [
                        "array",
                        "null"
                    ]
                },
                "run": {
                    "description": "Include or exclude runs for a source.",
                    "items": {
                        "type": "string"
                    },
                    "type": [
                        "array",
                        "null"
                    ]
                }
            },
            "title": "AlignmentParent",
            "type": "object"
        },
        "AlignmentParentFilters": {
            "additionalProperties": false,
            "description": "Types of parent filters for an alignment source.",
            "properties": {
                "exclude": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/AlignmentParent"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "description": "A filter for a parent class of an alignment source. For a given attribute, it can only be used if the current class is a subclass of the attribute."
                },
                "include": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/AlignmentParent"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "description": "A filter for a parent class of an alignment source. For a given attribute, it can only be used if the current class is a subclass of the attribute."
                }
            },
            "title": "AlignmentParentFilters",
            "type": "object"
        },
        "AlignmentSize": {
            "additionalProperties": false,
            "description": "The size of an alignment in voxels in each dimension.",
            "properties": {
                "x": {
                    "$ref": "#/$defs/Any",
                    "anyOf": [
                        {
                            "type": "integer"
                        },
                        {
                            "pattern": "^int[ ]*\\{[a-zA-Z0-9_-]+\\}[ ]*$",
                            "type": "string"
                        }
                    ],
                    "description": "Number of pixels in the 3D data fast axis",
                    "pattern": "^int[ ]*\\{[a-zA-Z0-9_-]+\\}[ ]*$"
                },
                "y": {
                    "$ref": "#/$defs/Any",
                    "anyOf": [
                        {
                            "type": "integer"
                        },
                        {
                            "pattern": "^int[ ]*\\{[a-zA-Z0-9_-]+\\}[ ]*$",
                            "type": "string"
                        }
                    ],
                    "description": "Number of pixels in the 3D data medium axis",
                    "pattern": "^int[ ]*\\{[a-zA-Z0-9_-]+\\}[ ]*$"
                },
                "z": {
                    "$ref": "#/$defs/Any",
                    "anyOf": [
                        {
                            "type": "integer"
                        },
                        {
                            "pattern": "^int[ ]*\\{[a-zA-Z0-9_-]+\\}[ ]*$",
                            "type": "string"
                        }
                    ],
                    "description": "Number of pixels in the 3D data slow axis.  This is the image projection direction at zero stage tilt",
                    "pattern": "^int[ ]*\\{[a-zA-Z0-9_-]+\\}[ ]*$"
                }
            },
            "required": [
                "x",
                "y",
                "z"
            ],
            "title": "AlignmentSize",
            "type": "object"
        },
        "AlignmentSource": {
            "additionalProperties": false,
            "description": "An alignment source.",
            "properties": {
                "destination_glob": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/DestinationGlob"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "description": "A glob class for finding files in the output / destination directory."
                },
                "exclude": {
                    "description": "Exclude files from the source that match (regexes).",
                    "items": {
                        "type": "string"
                    },
                    "type": [
                        "array",
                        "null"
                    ]
                },
                "literal": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/StandardLiteral"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "description": "A literal class with a value attribute."
                },
                "parent_filters": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/AlignmentParentFilters"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "description": "Types of parent filters for an alignment source."
                },
                "source_glob": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/SourceGlob"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "description": "A glob class for finding files in the source directory."
                },
                "source_multi_glob": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/SourceMultiGlob"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "description": "A glob class for finding files in the source directory (with multiple globs)."
                }
            },
            "title": "AlignmentSource",
            "type": "object"
        },
        "AlignmentTypeEnum": {
            "description": "Type of alignment",
            "enum": [
                "LOCAL",
                "GLOBAL"
            ],
            "title": "AlignmentTypeEnum",
            "type": "string"
        },
        "Annotation": {
            "additionalProperties": false,
            "description": "Metadata describing an annotation.",
            "properties": {
                "annotation_method": {
                    "description": "Describe how the annotation is made (e.g. Manual, crYoLO, Positive Unlabeled Learning, template matching)",
                    "type": "string"
                },
                "annotation_object": {
                    "$ref": "#/$defs/AnnotationObject",
                    "description": "Metadata describing the object being annotated."
                },
                "annotation_publications": {
                    "description": "List of publication IDs (EMPIAR, EMDB, DOI, PDB) that describe this annotation method. Comma separated.",
                    "pattern": "^(EMPIAR-[0-9]{5}|EMD-[0-9]{4,5}|(doi:)?10\\.[0-9]{4,9}/[-._;()/:a-zA-Z0-9]+|PDB-[0-9a-zA-Z]{4,8})(\\s*,\\s*(EMPIAR-[0-9]{5}|EMD-[0-9]{4,5}|(doi:)?10\\.[0-9]{4,9}/[-._;()/:a-zA-Z0-9]+|PDB-[0-9a-zA-Z]{4,8}))*$",
                    "type": [
                        "string",
                        "null"
                    ]
                },
                "annotation_software": {
                    "description": "Software used for generating this annotation",
                    "type": [
                        "string",
                        "null"
                    ]
                },
                "authors": {
                    "description": "Author of a scientific data entity.",
                    "items": {
                        "$ref": "#/$defs/Author"
                    },
                    "minItems": 1,
                    "type": "array"
                },
                "confidence": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/AnnotationConfidence"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "description": "Metadata describing the confidence of an annotation."
                },
                "dates": {
                    "$ref": "#/$defs/DateStamp",
                    "description": "A set of dates at which a data item was deposited, published and last modified."
                },
                "files": {
                    "description": "File and sourcing data for an annotation. Represents an entry in annotation.sources.",
                    "items": {
                        "$ref": "#/$defs/AnnotationSourceFile"
                    },
                    "type": [
                        "array",
                        "null"
                    ]
                },
                "ground_truth_status": {
                    "description": "Whether an annotation is considered ground truth, as determined by the annotator.",
                    "type": [
                        "boolean",
                        "null"
                    ]
                },
                "is_curator_recommended": {
                    "description": "This annotation is recommended by the curator to be preferred for this object type.",
                    "type": [
                        "boolean",
                        "null"
                    ]
                },
                "method_links": {
                    "description": "A set of links to models, source code, documentation, etc referenced by annotation the method",
                    "items": {
                        "$ref": "#/$defs/AnnotationMethodLinks"
                    },
                    "type": [
                        "array",
                        "null"
                    ]
                },
                "method_type": {
                    "$ref": "#/$defs/AnnotationMethodTypeEnum",
                    "description": "Classification of the annotation method based on supervision.",
                    "pattern": "(^manual$)|(^automated$)|(^hybrid$)|(^simulated$)"
                },
                "object_count": {
                    "description": "Number of objects identified",
                    "type": [
                        "integer",
                        "null"
                    ]
                },
                "version": {
                    "description": "Version of annotation.",
                    "minimum": 0,
                    "type": [
                        "number",
                        "null"
                    ]
                }
            },
            "required": [
                "annotation_method",
                "annotation_object",
                "method_type",
                "dates",
                "authors"
            ],
            "title": "Annotation",
            "type": "object"
        },
        "AnnotationConfidence": {
            "additionalProperties": false,
            "description": "Metadata describing the confidence of an annotation.",
            "properties": {
                "ground_truth_used": {
                    "description": "Annotation filename used as ground truth for precision and recall",
                    "type": [
                        "string",
                        "null"
                    ]
                },
                "precision": {
                    "description": "Describe the confidence level of the annotation. Precision is defined as the % of annotation objects being true positive",
                    "maximum": 100,
                    "minimum": 0,
                    "type": [
                        "number",
                        "null"
                    ]
                },
                "recall": {
                    "description": "Describe the confidence level of the annotation. Recall is defined as the % of true positives being annotated correctly",
                    "maximum": 100,
                    "minimum": 0,
                    "type": [
                        "number",
                        "null"
                    ]
                }
            },
            "title": "AnnotationConfidence",
            "type": "object"
        },
        "AnnotationEntity": {
            "additionalProperties": false,
            "description": "An annotation entity.",
            "properties": {
                "metadata": {
                    "$ref": "#/$defs/Annotation",
                    "description": "Metadata describing an annotation."
                },
                "sources": {
                    "description": "An annotation source.",
                    "items": {
                        "$ref": "#/$defs/AnnotationSource"
                    },
                    "minItems": 1,
                    "type": "array"
                }
            },
            "required": [
                "metadata",
                "sources"
            ],
            "title": "AnnotationEntity",
            "type": "object"
        },
        "AnnotationFileShapeTypeEnum": {
            "description": "Describes the shape of the annotation",
            "enum": [
                "SegmentationMask",
                "OrientedPoint",
                "Point",
                "InstanceSegmentation",
                "TriangularMesh",
                "TriangularMeshGroup"
            ],
            "title": "AnnotationFileShapeTypeEnum",
            "type": "string"
        },
        "AnnotationInstanceSegmentationFile": {
            "additionalProperties": false,
            "description": "File and sourcing data for an instance segmentation annotation. Annotation that identifies individual instances of object shapes.",
            "properties": {
                "binning": {
                    "description": "The binning factor for a point / oriented point / instance segmentation annotation file.",
                    "minimum": 0,
                    "type": [
                        "number",
                        "null"
                    ]
                },
                "file_format": {
                    "description": "File format for this file",
                    "type": "string"
                },
                "filter_value": {
                    "description": "The filter value for an oriented point / instance segmentation annotation file.",
                    "type": [
                        "string",
                        "null"
                    ]
                },
                "glob_string": {
                    "description": "Glob string to match annotation files in the dataset. Required if annotation_source_file_glob_strings is not provided.",
                    "type": [
                        "string",
                        "null"
                    ]
                },
                "glob_strings": {
                    "description": "Glob strings to match annotation files in the dataset. Required if annotation_source_file_glob_string is not provided.",
                    "items": {
                        "type": "string"
                    },
                    "type": [
                        "array",
                        "null"
                    ]
                },
                "is_portal_standard": {
                    "description": "Whether the annotation source is a portal standard.",
                    "type": [
                        "boolean",
                        "null"
                    ]
                },
                "is_visualization_default": {
                    "description": "This annotation will be rendered in neuroglancer by default.",
                    "type": [
                        "boolean",
                        "null"
                    ]
                },
                "order": {
                    "description": "The order of axes for an oriented point / instance segmentation annotation file.",
                    "type": [
                        "string",
                        "null"
                    ]
                }
            },
            "required": [
                "file_format"
            ],
            "title": "AnnotationInstanceSegmentationFile",
            "type": "object"
        },
        "AnnotationMethodLinkTypeEnum": {
            "description": "Describes the type of link associated to the annotation method.",
            "enum": [
                "documentation",
                "models_weights",
                "other",
                "source_code",
                "website"
            ],
            "title": "AnnotationMethodLinkTypeEnum",
            "type": "string"
        },
        "AnnotationMethodLinks": {
            "additionalProperties": false,
            "description": "A set of links to models, source code, documentation, etc referenced by annotation the method",
            "properties": {
                "custom_name": {
                    "description": "user readable name of the resource",
                    "type": [
                        "string",
                        "null"
                    ]
                },
                "link": {
                    "description": "URL to the annotation method reference",
                    "type": "string"
                },
                "link_type": {
                    "$ref": "#/$defs/AnnotationMethodLinkTypeEnum",
                    "description": "Type of link (e.g. model, source code, documentation)",
                    "pattern": "(^documentation$)|(^models_weights$)|(^other$)|(^source_code$)|(^website$)"
                }
            },
            "required": [
                "link",
                "link_type"
            ],
            "title": "AnnotationMethodLinks",
            "type": "object"
        },
        "AnnotationMethodTypeEnum": {
            "description": "Describes how the annotations were generated.",
            "enum": [
                "manual",
                "automated",
                "hybrid",
                "simulated"
            ],
            "title": "AnnotationMethodTypeEnum",
            "type": "string"
        },
        "AnnotationObject": {
            "additionalProperties": false,
            "description": "Metadata describing the object being annotated.",
            "properties": {
                "description": {
                    "description": "A textual description of the annotation object, can be a longer description to include additional information not covered by the Annotation object name and state.",
                    "type": [
                        "string",
                        "null"
                    ]
                },
                "id": {
                    "$ref": "#/$defs/Any",
                    "anyOf": [
                        {
                            "pattern": "^GO:[0-9]{7}$",
                            "type": "string"
                        },
                        {
                            "pattern": "^UniProtKB:[OPQ][0-9][A-Z0-9]{3}[0-9]|[A-NR-Z][0-9]([A-Z][A-Z0-9]{2}[0-9]){1,2}$",
                            "type": "string"
                        }
                    ],
                    "description": "Gene Ontology Cellular Component identifier or UniProtKB accession for the annotation object.",
                    "pattern": "(^GO:[0-9]{7}$)|(^UniProtKB:[OPQ][0-9][A-Z0-9]{3}[0-9]|[A-NR-Z][0-9]([A-Z][A-Z0-9]{2}[0-9]){1,2}$)"
                },
                "name": {
                    "description": "Name of the object being annotated (e.g. ribosome, nuclear pore complex, actin filament, membrane)",
                    "type": "string"
                },
                "state": {
                    "description": "Molecule state annotated (e.g. open, closed)",
                    "type": [
                        "string",
                        "null"
                    ]
                }
            },
            "required": [
                "id",
                "name"
            ],
            "title": "AnnotationObject",
            "type": "object"
        },
        "AnnotationOrientedPointFile": {
            "additionalProperties": false,
            "description": "File and sourcing data for an oriented point annotation. Annotation that identifies points along with orientation in the volume.",
            "properties": {
                "binning": {
                    "description": "The binning factor for a point / oriented point / instance segmentation annotation file.",
                    "minimum": 0,
                    "type": [
                        "number",
                        "null"
                    ]
                },
                "file_format": {
                    "description": "File format for this file",
                    "type": "string"
                },
                "filter_value": {
                    "description": "The filter value for an oriented point / instance segmentation annotation file.",
                    "type": [
                        "string",
                        "null"
                    ]
                },
                "glob_string": {
                    "description": "Glob string to match annotation files in the dataset. Required if annotation_source_file_glob_strings is not provided.",
                    "type": [
                        "string",
                        "null"
                    ]
                },
                "glob_strings": {
                    "description": "Glob strings to match annotation files in the dataset. Required if annotation_source_file_glob_string is not provided.",
                    "items": {
                        "type": "string"
                    },
                    "type": [
                        "array",
                        "null"
                    ]
                },
                "is_portal_standard": {
                    "description": "Whether the annotation source is a portal standard.",
                    "type": [
                        "boolean",
                        "null"
                    ]
                },
                "is_visualization_default": {
                    "description": "This annotation will be rendered in neuroglancer by default.",
                    "type": [
                        "boolean",
                        "null"
                    ]
                },
                "order": {
                    "description": "The order of axes for an oriented point / instance segmentation annotation file.",
                    "type": [
                        "string",
                        "null"
                    ]
                }
            },
            "required": [
                "file_format"
            ],
            "title": "AnnotationOrientedPointFile",
            "type": "object"
        },
        "AnnotationParent": {
            "additionalProperties": false,
            "description": "A filter for a parent class of an annotation source. For a given attribute, it can only be used if the current class is a subclass of the attribute.",
            "properties": {
                "dataset": {
                    "description": "Include or exclude datasets for a source.",
                    "items": {
                        "type": "string"
                    },
                    "type": [
                        "array",
                        "null"
                    ]
                },
                "deposition": {
                    "description": "Include or exclude depositions for a source.",
                    "items": {
                        "type": "string"
                    },
                    "type": [
                        "array",
                        "null"
                    ]
                },
                "run": {
                    "description": "Include or exclude runs for a source.",
                    "items": {
                        "type": "string"
                    },
                    "type": [
                        "array",
                        "null"
                    ]
                },
                "voxel_spacing": {
                    "description": "Include or exclude voxel spacings for a source.",
                    "items": {
                        "type": "string"
                    },
                    "type": [
                        "array",
                        "null"
                    ]
                }
            },
            "title": "AnnotationParent",
            "type": "object"
        },
        "AnnotationParentFilters": {
            "additionalProperties": false,
            "description": "Filters for the parent of an annotation source.",
            "properties": {
                "exclude": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/AnnotationParent"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "description": "A filter for a parent class of an annotation source. For a given attribute, it can only be used if the current class is a subclass of the attribute."
                },
                "include": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/AnnotationParent"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "description": "A filter for a parent class of an annotation source. For a given attribute, it can only be used if the current class is a subclass of the attribute."
                }
            },
            "title": "AnnotationParentFilters",
            "type": "object"
        },
        "AnnotationPointFile": {
            "additionalProperties": false,
            "description": "File and sourcing data for a point annotation. Annotation that identifies points in the volume.",
            "properties": {
                "binning": {
                    "description": "The binning factor for a point / oriented point / instance segmentation annotation file.",
                    "minimum": 0,
                    "type": [
                        "number",
                        "null"
                    ]
                },
                "columns": {
                    "description": "The columns used in a point annotation file.",
                    "type": [
                        "string",
                        "null"
                    ]
                },
                "delimiter": {
                    "description": "The delimiter used in a point annotation file.",
                    "type": [
                        "string",
                        "null"
                    ]
                },
                "file_format": {
                    "description": "File format for this file",
                    "type": "string"
                },
                "filter_value": {
                    "description": "The filter value for an oriented point / instance segmentation annotation file.",
                    "type": [
                        "string",
                        "null"
                    ]
                },
                "glob_string": {
                    "description": "Glob string to match annotation files in the dataset. Required if annotation_source_file_glob_strings is not provided.",
                    "type": [
                        "string",
                        "null"
                    ]
                },
                "glob_strings": {
                    "description": "Glob strings to match annotation files in the dataset. Required if annotation_source_file_glob_string is not provided.",
                    "items": {
                        "type": "string"
                    },
                    "type": [
                        "array",
                        "null"
                    ]
                },
                "is_portal_standard": {
                    "description": "Whether the annotation source is a portal standard.",
                    "type": [
                        "boolean",
                        "null"
                    ]
                },
                "is_visualization_default": {
                    "description": "This annotation will be rendered in neuroglancer by default.",
                    "type": [
                        "boolean",
                        "null"
                    ]
                }
            },
            "required": [
                "file_format"
            ],
            "title": "AnnotationPointFile",
            "type": "object"
        },
        "AnnotationSegmentationMaskFile": {
            "additionalProperties": false,
            "description": "File and sourcing data for a segmentation mask annotation. Annotation that identifies an object.",
            "properties": {
                "file_format": {
                    "description": "File format for this file",
                    "type": "string"
                },
                "glob_string": {
                    "description": "Glob string to match annotation files in the dataset. Required if annotation_source_file_glob_strings is not provided.",
                    "type": [
                        "string",
                        "null"
                    ]
                },
                "glob_strings": {
                    "description": "Glob strings to match annotation files in the dataset. Required if annotation_source_file_glob_string is not provided.",
                    "items": {
                        "type": "string"
                    },
                    "type": [
                        "array",
                        "null"
                    ]
                },
                "is_portal_standard": {
                    "description": "Whether the annotation source is a portal standard.",
                    "type": [
                        "boolean",
                        "null"
                    ]
                },
                "is_visualization_default": {
                    "description": "This annotation will be rendered in neuroglancer by default.",
                    "type": [
                        "boolean",
                        "null"
                    ]
                }
            },
            "required": [
                "file_format"
            ],
            "title": "AnnotationSegmentationMaskFile",
            "type": "object"
        },
        "AnnotationSemanticSegmentationMaskFile": {
            "additionalProperties": false,
            "description": "File and sourcing data for a semantic segmentation mask annotation. Annotation that identifies classes of objects.",
            "properties": {
                "file_format": {
                    "description": "File format for this file",
                    "type": "string"
                },
                "glob_string": {
                    "description": "Glob string to match annotation files in the dataset. Required if annotation_source_file_glob_strings is not provided.",
                    "type": [
                        "string",
                        "null"
                    ]
                },
                "glob_strings": {
                    "description": "Glob strings to match annotation files in the dataset. Required if annotation_source_file_glob_string is not provided.",
                    "items": {
                        "type": "string"
                    },
                    "type": [
                        "array",
                        "null"
                    ]
                },
                "is_portal_standard": {
                    "description": "Whether the annotation source is a portal standard.",
                    "type": [
                        "boolean",
                        "null"
                    ]
                },
                "is_visualization_default": {
                    "description": "This annotation will be rendered in neuroglancer by default.",
                    "type": [
                        "boolean",
                        "null"
                    ]
                },
                "mask_label": {
                    "description": "The mask label for a semantic segmentation mask annotation file.",
                    "type": [
                        "integer",
                        "null"
                    ]
                },
                "rescale": {
                    "description": "Whether the annotation file needs to be rescaled.",
                    "type": [
                        "boolean",
                        "null"
                    ]
                },
                "threshold": {
                    "description": "The threshold for a segmentation mask annotation file.",
                    "type": [
                        "number",
                        "null"
                    ]
                }
            },
            "required": [
                "file_format"
            ],
            "title": "AnnotationSemanticSegmentationMaskFile",
            "type": "object"
        },
        "AnnotationSource": {
            "additionalProperties": false,
            "description": "An annotation source.",
            "properties": {
                "InstanceSegmentation": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/AnnotationInstanceSegmentationFile"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "description": "File and sourcing data for an instance segmentation annotation. Annotation that identifies individual instances of object shapes."
                },
                "OrientedPoint": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/AnnotationOrientedPointFile"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "description": "File and sourcing data for an oriented point annotation. Annotation that identifies points along with orientation in the volume."
                },
                "Point": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/AnnotationPointFile"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "description": "File and sourcing data for a point annotation. Annotation that identifies points in the volume."
                },
                "SegmentationMask": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/AnnotationSegmentationMaskFile"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "description": "File and sourcing data for a segmentation mask annotation. Annotation that identifies an object."
                },
                "SemanticSegmentationMask": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/AnnotationSemanticSegmentationMaskFile"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "description": "File and sourcing data for a semantic segmentation mask annotation. Annotation that identifies classes of objects."
                },
                "TriangularMesh": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/AnnotationTriangularMeshFile"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "description": "File and sourcing data for a triangular mesh annotation. Annotation that identifies an object."
                },
                "TriangularMeshGroup": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/AnnotationTriangularMeshGroupFile"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "description": "File and sourcing data containing one or more triangular mesh annotations."
                },
                "exclude": {
                    "description": "Exclude files from the source that match (regexes).",
                    "items": {
                        "type": "string"
                    },
                    "type": [
                        "array",
                        "null"
                    ]
                },
                "parent_filters": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/AnnotationParentFilters"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "description": "Filters for the parent of an annotation source."
                }
            },
            "title": "AnnotationSource",
            "type": "object"
        },
        "AnnotationSourceFile": {
            "additionalProperties": false,
            "description": "File and sourcing data for an annotation. Represents an entry in annotation.sources.",
            "properties": {
                "file_format": {
                    "description": "File format for this file",
                    "type": "string"
                },
                "glob_string": {
                    "description": "Glob string to match annotation files in the dataset. Required if annotation_source_file_glob_strings is not provided.",
                    "type": [
                        "string",
                        "null"
                    ]
                },
                "glob_strings": {
                    "description": "Glob strings to match annotation files in the dataset. Required if annotation_source_file_glob_string is not provided.",
                    "items": {
                        "type": "string"
                    },
                    "type": [
                        "array",
                        "null"
                    ]
                },
                "is_portal_standard": {
                    "description": "Whether the annotation source is a portal standard.",
                    "type": [
                        "boolean",
                        "null"
                    ]
                },
                "is_visualization_default": {
                    "description": "This annotation will be rendered in neuroglancer by default.",
                    "type": [
                        "boolean",
                        "null"
                    ]
                }
            },
            "required": [
                "file_format"
            ],
            "title": "AnnotationSourceFile",
            "type": "object"
        },
        "AnnotationTriangularMeshFile": {
            "additionalProperties": false,
            "description": "File and sourcing data for a triangular mesh annotation. Annotation that identifies an object.",
            "properties": {
                "file_format": {
                    "description": "File format for this file",
                    "type": "string"
                },
                "glob_string": {
                    "description": "Glob string to match annotation files in the dataset. Required if annotation_source_file_glob_strings is not provided.",
                    "type": [
                        "string",
                        "null"
                    ]
                },
                "glob_strings": {
                    "description": "Glob strings to match annotation files in the dataset. Required if annotation_source_file_glob_string is not provided.",
                    "items": {
                        "type": "string"
                    },
                    "type": [
                        "array",
                        "null"
                    ]
                },
                "is_portal_standard": {
                    "description": "Whether the annotation source is a portal standard.",
                    "type": [
                        "boolean",
                        "null"
                    ]
                },
                "is_visualization_default": {
                    "description": "This annotation will be rendered in neuroglancer by default.",
                    "type": [
                        "boolean",
                        "null"
                    ]
                },
                "scale_factor": {
                    "description": "The scale factor for a mesh annotation file.",
                    "minimum": 0,
                    "type": [
                        "number",
                        "null"
                    ]
                }
            },
            "required": [
                "file_format"
            ],
            "title": "AnnotationTriangularMeshFile",
            "type": "object"
        },
        "AnnotationTriangularMeshGroupFile": {
            "additionalProperties": false,
            "description": "File and sourcing data containing one or more triangular mesh annotations.",
            "properties": {
                "file_format": {
                    "description": "File format for this file",
                    "type": "string"
                },
                "glob_string": {
                    "description": "Glob string to match annotation files in the dataset. Required if annotation_source_file_glob_strings is not provided.",
                    "type": [
                        "string",
                        "null"
                    ]
                },
                "glob_strings": {
                    "description": "Glob strings to match annotation files in the dataset. Required if annotation_source_file_glob_string is not provided.",
                    "items": {
                        "type": "string"
                    },
                    "type": [
                        "array",
                        "null"
                    ]
                },
                "is_portal_standard": {
                    "description": "Whether the annotation source is a portal standard.",
                    "type": [
                        "boolean",
                        "null"
                    ]
                },
                "is_visualization_default": {
                    "description": "This annotation will be rendered in neuroglancer by default.",
                    "type": [
                        "boolean",
                        "null"
                    ]
                },
                "name": {
                    "description": "The name that identifies to a single annotation mesh among multiple meshes.",
                    "type": [
                        "string",
                        "null"
                    ]
                },
                "scale_factor": {
                    "description": "The scale factor for a mesh annotation file.",
                    "minimum": 0,
                    "type": [
                        "number",
                        "null"
                    ]
                }
            },
            "required": [
                "file_format"
            ],
            "title": "AnnotationTriangularMeshGroupFile",
            "type": "object"
        },
        "Any": {
            "additionalProperties": true,
            "description": "",
            "title": "Any",
            "type": [
                "null",
                "boolean",
                "object",
                "number",
                "string"
            ]
        },
        "Author": {
            "additionalProperties": false,
            "description": "Author of a scientific data entity.",
            "properties": {
                "ORCID": {
                    "description": "The ORCID identifier for the author.",
                    "pattern": "[0-9]{4}-[0-9]{4}-[0-9]{4}-[0-9]{3}[0-9X]$",
                    "type": [
                        "string",
                        "null"
                    ]
                },
                "affiliation_address": {
                    "description": "The address of the author's affiliation.",
                    "type": [
                        "string",
                        "null"
                    ]
                },
                "affiliation_identifier": {
                    "description": "A Research Organization Registry (ROR) identifier.",
                    "type": [
                        "string",
                        "null"
                    ]
                },
                "affiliation_name": {
                    "description": "The name of the author's affiliation.",
                    "type": [
                        "string",
                        "null"
                    ]
                },
                "corresponding_author_status": {
                    "description": "Whether the author is a corresponding author.",
                    "type": [
                        "boolean",
                        "null"
                    ]
                },
                "email": {
                    "description": "The email address of the author.",
                    "type": [
                        "string",
                        "null"
                    ]
                },
                "name": {
                    "description": "The full name of the author.",
                    "type": "string"
                },
                "primary_author_status": {
                    "description": "Whether the author is a primary author.",
                    "type": [
                        "boolean",
                        "null"
                    ]
                }
            },
            "required": [
                "name"
            ],
            "title": "Author",
            "type": "object"
        },
        "AuthoredEntity": {
            "additionalProperties": false,
            "description": "An entity with associated authors.",
            "properties": {
                "authors": {
                    "description": "Author of a scientific data entity.",
                    "items": {
                        "$ref": "#/$defs/Author"
                    },
                    "minItems": 1,
                    "type": "array"
                }
            },
            "required": [
                "authors"
            ],
            "title": "AuthoredEntity",
            "type": "object"
        },
        "CameraDetails": {
            "additionalProperties": false,
            "description": "The camera used to collect the tilt series.",
            "properties": {
                "acquire_mode": {
                    "anyOf": [
                        {
                            "pattern": "^[ ]*\\{[a-zA-Z0-9_-]+\\}[ ]*$",
                            "type": "string"
                        },
                        {
                            "$ref": "#/$defs/TiltseriesCameraAcquireModeEnum"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "description": "Camera acquisition mode",
                    "pattern": "(^[ ]*\\{[a-zA-Z0-9_-]+\\}[ ]*$)|((^counting$)|(^superresolution$)|(^linear$)|(^cds$))"
                },
                "manufacturer": {
                    "description": "Name of the camera manufacturer",
                    "type": "string"
                },
                "model": {
                    "description": "Camera model name",
                    "type": "string"
                }
            },
            "required": [
                "manufacturer",
                "model"
            ],
            "title": "CameraDetails",
            "type": "object"
        },
        "CellComponent": {
            "additionalProperties": false,
            "description": "The cellular component from which the sample was derived.",
            "properties": {
                "id": {
                    "description": "The GO identifier for the cellular component.",
                    "pattern": "^GO:[0-9]{7}$",
                    "type": [
                        "string",
                        "null"
                    ]
                },
                "name": {
                    "description": "Name of the cellular component.",
                    "type": "string"
                }
            },
            "required": [
                "name"
            ],
            "title": "CellComponent",
            "type": "object"
        },
        "CellStrain": {
            "additionalProperties": false,
            "description": "The strain or cell line from which the sample was derived.",
            "properties": {
                "id": {
                    "anyOf": [
                        {
                            "pattern": "WBStrain[0-9]{8}$",
                            "type": "string"
                        },
                        {
                            "pattern": "^[a-zA-Z]+:[0-9]+$",
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "description": "Link to more information about the cell strain.",
                    "pattern": "(WBStrain[0-9]{8}$)|(^[a-zA-Z]+:[0-9]+$)"
                },
                "name": {
                    "description": "Cell line or strain for the sample.",
                    "type": "string"
                }
            },
            "required": [
                "name"
            ],
            "title": "CellStrain",
            "type": "object"
        },
        "CellType": {
            "additionalProperties": false,
            "description": "The cell type from which the sample was derived.",
            "properties": {
                "id": {
                    "description": "Cell Ontology identifier for the cell type",
                    "pattern": "^CL:[0-9]{7}$",
                    "type": [
                        "string",
                        "null"
                    ]
                },
                "name": {
                    "description": "Name of the cell type from which a biological sample used in a CryoET study is derived from.",
                    "type": "string"
                }
            },
            "required": [
                "name"
            ],
            "title": "CellType",
            "type": "object"
        },
        "CollectionMetadataEntity": {
            "additionalProperties": false,
            "description": "A collection_metadata entity.",
            "properties": {
                "sources": {
                    "description": "A collection_metadata source.",
                    "items": {
                        "$ref": "#/$defs/CollectionMetadataSource"
                    },
                    "minItems": 1,
                    "type": "array"
                }
            },
            "required": [
                "sources"
            ],
            "title": "CollectionMetadataEntity",
            "type": "object"
        },
        "CollectionMetadataParent": {
            "additionalProperties": false,
            "description": "A filter for a parent class of a collection_metadata source. For a given attribute, it can only be used if the current class is a subclass of the attribute.",
            "properties": {
                "dataset": {
                    "description": "Include or exclude datasets for a source.",
                    "items": {
                        "type": "string"
                    },
                    "type": [
                        "array",
                        "null"
                    ]
                },
                "deposition": {
                    "description": "Include or exclude depositions for a source.",
                    "items": {
                        "type": "string"
                    },
                    "type": [
                        "array",
                        "null"
                    ]
                },
                "run": {
                    "description": "Include or exclude runs for a source.",
                    "items": {
                        "type": "string"
                    },
                    "type": [
                        "array",
                        "null"
                    ]
                }
            },
            "title": "CollectionMetadataParent",
            "type": "object"
        },
        "CollectionMetadataParentFilters": {
            "additionalProperties": false,
            "description": "Types of parent filters for a collection_metadata source.",
            "properties": {
                "exclude": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/CollectionMetadataParent"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "description": "A filter for a parent class of a collection_metadata source. For a given attribute, it can only be used if the current class is a subclass of the attribute."
                },
                "include": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/CollectionMetadataParent"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "description": "A filter for a parent class of a collection_metadata source. For a given attribute, it can only be used if the current class is a subclass of the attribute."
                }
            },
            "title": "CollectionMetadataParentFilters",
            "type": "object"
        },
        "CollectionMetadataSource": {
            "additionalProperties": false,
            "description": "A collection_metadata source.",
            "properties": {
                "destination_glob": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/DestinationGlob"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "description": "A glob class for finding files in the output / destination directory."
                },
                "exclude": {
                    "description": "Exclude files from the source that match (regexes).",
                    "items": {
                        "type": "string"
                    },
                    "type": [
                        "array",
                        "null"
                    ]
                },
                "literal": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/StandardLiteral"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "description": "A literal class with a value attribute."
                },
                "parent_filters": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/CollectionMetadataParentFilters"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "description": "Types of parent filters for a collection_metadata source."
                },
                "source_glob": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/SourceGlob"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "description": "A glob class for finding files in the source directory."
                },
                "source_multi_glob": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/SourceMultiGlob"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "description": "A glob class for finding files in the source directory (with multiple globs)."
                }
            },
            "title": "CollectionMetadataSource",
            "type": "object"
        },
        "Container": {
            "additionalProperties": false,
            "description": "Class that models the ingestion config file.",
            "properties": {
                "alignments": {
                    "description": "An alignment entity.",
                    "items": {
                        "$ref": "#/$defs/AlignmentEntity"
                    },
                    "type": [
                        "array",
                        "null"
                    ]
                },
                "annotations": {
                    "description": "An annotation entity.",
                    "items": {
                        "$ref": "#/$defs/AnnotationEntity"
                    },
                    "type": [
                        "array",
                        "null"
                    ]
                },
                "collection_metadata": {
                    "description": "A collection_metadata entity.",
                    "items": {
                        "$ref": "#/$defs/CollectionMetadataEntity"
                    },
                    "type": [
                        "array",
                        "null"
                    ]
                },
                "dataset_keyphotos": {
                    "description": "A dataset key photo entity.",
                    "items": {
                        "$ref": "#/$defs/DatasetKeyPhotoEntity"
                    },
                    "type": [
                        "array",
                        "null"
                    ]
                },
                "datasets": {
                    "description": "A dataset entity.",
                    "items": {
                        "$ref": "#/$defs/DatasetEntity"
                    },
                    "minItems": 1,
                    "type": "array"
                },
                "deposition_keyphotos": {
                    "description": "A deposition key photo entity.",
                    "items": {
                        "$ref": "#/$defs/DepositionKeyPhotoEntity"
                    },
                    "type": [
                        "array",
                        "null"
                    ]
                },
                "depositions": {
                    "description": "A deposition entity.",
                    "items": {
                        "$ref": "#/$defs/DepositionEntity"
                    },
                    "minItems": 1,
                    "type": "array"
                },
                "frames": {
                    "description": "A frame entity.",
                    "items": {
                        "$ref": "#/$defs/FrameEntity"
                    },
                    "type": [
                        "array",
                        "null"
                    ]
                },
                "gains": {
                    "description": "A gain entity.",
                    "items": {
                        "$ref": "#/$defs/GainEntity"
                    },
                    "type": [
                        "array",
                        "null"
                    ]
                },
                "key_images": {
                    "description": "A key image entity.",
                    "items": {
                        "$ref": "#/$defs/KeyImageEntity"
                    },
                    "type": [
                        "array",
                        "null"
                    ]
                },
                "rawtilts": {
                    "description": "A raw tilt entity.",
                    "items": {
                        "$ref": "#/$defs/RawTiltEntity"
                    },
                    "type": [
                        "array",
                        "null"
                    ]
                },
                "runs": {
                    "description": "A run entity.",
                    "items": {
                        "$ref": "#/$defs/RunEntity"
                    },
                    "minItems": 1,
                    "type": "array"
                },
                "standardization_config": {
                    "$ref": "#/$defs/StandardizationConfig",
                    "description": "A standardization configuration."
                },
                "tiltseries": {
                    "description": "A tilt series entity.",
                    "items": {
                        "$ref": "#/$defs/TiltSeriesEntity"
                    },
                    "type": [
                        "array",
                        "null"
                    ]
                },
                "tomograms": {
                    "description": "A tomogram entity.",
                    "items": {
                        "$ref": "#/$defs/TomogramEntity"
                    },
                    "type": [
                        "array",
                        "null"
                    ]
                },
                "version": {
                    "description": "The version of the ingestion config.",
                    "type": "string"
                },
                "voxel_spacings": {
                    "description": "A voxel spacing entity.",
                    "items": {
                        "$ref": "#/$defs/VoxelSpacingEntity"
                    },
                    "minItems": 1,
                    "type": "array"
                }
            },
            "required": [
                "datasets",
                "depositions",
                "runs",
                "standardization_config",
                "version",
                "voxel_spacings"
            ],
            "title": "Container",
            "type": "object"
        },
        "CrossReferences": {
            "additionalProperties": false,
            "description": "A set of cross-references to other databases and publications.",
            "properties": {
                "dataset_citations": {
                    "description": "Comma-separated list of DOIs for publications citing the dataset.",
                    "type": [
                        "string",
                        "null"
                    ]
                },
                "publications": {
                    "description": "Comma-separated list of DOIs for publications associated with the dataset.",
                    "pattern": "(^(doi:)?10\\.[0-9]{4,9}/[-._;()/:a-zA-Z0-9]+(\\s*,\\s*(doi:)?10\\.[0-9]{4,9}/[-._;()/:a-zA-Z0-9]+)*$)|(^(doi:)?10\\.[0-9]{4,9}/[-._;()/:a-zA-Z0-9]+(\\s*,\\s*(doi:)?10\\.[0-9]{4,9}/[-._;()/:a-zA-Z0-9]+)*$)",
                    "type": [
                        "string",
                        "null"
                    ]
                },
                "related_database_entries": {
                    "description": "Comma-separated list of related database entries for the dataset.",
                    "pattern": "(^(EMPIAR-[0-9]{5}|EMD-[0-9]{4,5}|PDB-[0-9a-zA-Z]{4,8})(\\s*,\\s*(EMPIAR-[0-9]{5}|EMD-[0-9]{4,5}|PDB-[0-9a-zA-Z]{4,8}))*$)|(^(EMPIAR-[0-9]{5}|EMD-[0-9]{4,5}|PDB-[0-9a-zA-Z]{4,8})(\\s*,\\s*(EMPIAR-[0-9]{5}|EMD-[0-9]{4,5}|PDB-[0-9a-zA-Z]{4,8}))*$)",
                    "type": [
                        "string",
                        "null"
                    ]
                },
                "related_database_links": {
                    "description": "Comma-separated list of related database links for the dataset.",
                    "type": [
                        "string",
                        "null"
                    ]
                }
            },
            "title": "CrossReferences",
            "type": "object"
        },
        "Dataset": {
            "additionalProperties": false,
            "description": "High-level description of a cryoET dataset.",
            "properties": {
                "authors": {
                    "description": "Author of a scientific data entity.",
                    "items": {
                        "$ref": "#/$defs/Author"
                    },
                    "minItems": 1,
                    "type": "array"
                },
                "cell_component": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/CellComponent"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "description": "The cellular component from which the sample was derived."
                },
                "cell_strain": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/CellStrain"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "description": "The strain or cell line from which the sample was derived."
                },
                "cell_type": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/CellType"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "description": "The cell type from which the sample was derived."
                },
                "cross_references": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/CrossReferences"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "description": "A set of cross-references to other databases and publications."
                },
                "dataset_description": {
                    "description": "A short description of a CryoET dataset, similar to an abstract for a journal article or dataset.",
                    "type": "string"
                },
                "dataset_identifier": {
                    "description": "An identifier for a CryoET dataset, assigned by the Data Portal. Used to identify the dataset as the directory name in data tree.",
                    "type": "integer"
                },
                "dataset_title": {
                    "description": "Title of a CryoET dataset.",
                    "type": "string"
                },
                "dates": {
                    "$ref": "#/$defs/DateStamp",
                    "description": "A set of dates at which a data item was deposited, published and last modified."
                },
                "funding": {
                    "description": "A funding source for a scientific data entity (base for JSON and DB representation).",
                    "items": {
                        "$ref": "#/$defs/FundingDetails"
                    },
                    "type": [
                        "array",
                        "null"
                    ]
                },
                "grid_preparation": {
                    "description": "Describes Cryo-ET grid preparation.",
                    "type": [
                        "string",
                        "null"
                    ]
                },
                "organism": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/OrganismDetails"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "description": "The species from which the sample was derived."
                },
                "other_setup": {
                    "description": "Describes other setup not covered by sample preparation or grid preparation that may make this dataset unique in the same publication.",
                    "type": [
                        "string",
                        "null"
                    ]
                },
                "sample_preparation": {
                    "description": "Describes how the sample was prepared.",
                    "type": [
                        "string",
                        "null"
                    ]
                },
                "sample_type": {
                    "$ref": "#/$defs/SampleTypeEnum",
                    "description": "Type of sample imaged in a CryoET study.",
                    "pattern": "(^cell$)|(^tissue$)|(^organism$)|(^organelle$)|(^virus$)|(^in_vitro$)|(^in_silico$)|(^other$)"
                },
                "tissue": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/TissueDetails"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "description": "The type of tissue from which the sample was derived."
                }
            },
            "required": [
                "dataset_identifier",
                "dataset_title",
                "dataset_description",
                "dates",
                "authors",
                "sample_type"
            ],
            "title": "Dataset",
            "type": "object"
        },
        "DatasetEntity": {
            "additionalProperties": false,
            "description": "A dataset entity.",
            "properties": {
                "metadata": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/Dataset"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "description": "High-level description of a cryoET dataset."
                },
                "sources": {
                    "description": "A dataset source.",
                    "items": {
                        "$ref": "#/$defs/DatasetSource"
                    },
                    "minItems": 1,
                    "type": "array"
                }
            },
            "required": [
                "sources"
            ],
            "title": "DatasetEntity",
            "type": "object"
        },
        "DatasetKeyPhotoEntity": {
            "additionalProperties": false,
            "description": "A dataset key photo entity.",
            "properties": {
                "sources": {
                    "description": "A key photo source.",
                    "items": {
                        "$ref": "#/$defs/DatasetKeyPhotoSource"
                    },
                    "minItems": 1,
                    "type": "array"
                }
            },
            "required": [
                "sources"
            ],
            "title": "DatasetKeyPhotoEntity",
            "type": "object"
        },
        "DatasetKeyPhotoParent": {
            "additionalProperties": false,
            "description": "A filter for a parent class of a key photo source. For a given attribute, it can only be used if the current class is a subclass of the attribute.",
            "properties": {
                "deposition": {
                    "description": "Include or exclude depositions for a source.",
                    "items": {
                        "type": "string"
                    },
                    "type": [
                        "array",
                        "null"
                    ]
                }
            },
            "title": "DatasetKeyPhotoParent",
            "type": "object"
        },
        "DatasetKeyPhotoParentFilters": {
            "additionalProperties": false,
            "description": "Types of parent filters for a key photo source.",
            "properties": {
                "exclude": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/DatasetKeyPhotoParent"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "description": "A filter for a parent class of a key photo source. For a given attribute, it can only be used if the current class is a subclass of the attribute."
                },
                "include": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/DatasetKeyPhotoParent"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "description": "A filter for a parent class of a key photo source. For a given attribute, it can only be used if the current class is a subclass of the attribute."
                }
            },
            "title": "DatasetKeyPhotoParentFilters",
            "type": "object"
        },
        "DatasetKeyPhotoSource": {
            "additionalProperties": false,
            "description": "A key photo source.",
            "properties": {
                "destination_glob": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/DestinationGlob"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "description": "A glob class for finding files in the output / destination directory."
                },
                "exclude": {
                    "description": "Exclude files from the source that match (regexes).",
                    "items": {
                        "type": "string"
                    },
                    "type": [
                        "array",
                        "null"
                    ]
                },
                "literal": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/KeyPhotoLiteral"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "description": "A literal for a key photo."
                },
                "parent_filters": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/DatasetKeyPhotoParentFilters"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "description": "Types of parent filters for a key photo source."
                },
                "source_glob": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/SourceGlob"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "description": "A glob class for finding files in the source directory."
                },
                "source_multi_glob": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/SourceMultiGlob"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "description": "A glob class for finding files in the source directory (with multiple globs)."
                }
            },
            "title": "DatasetKeyPhotoSource",
            "type": "object"
        },
        "DatasetParent": {
            "additionalProperties": false,
            "description": "A filter for a parent class of a dataset source. For a given attribute, it can only be used if the current class is a subclass of the attribute.",
            "properties": {
                "deposition": {
                    "description": "Include or exclude depositions for a source.",
                    "items": {
                        "type": "string"
                    },
                    "type": [
                        "array",
                        "null"
                    ]
                }
            },
            "title": "DatasetParent",
            "type": "object"
        },
        "DatasetParentFilters": {
            "additionalProperties": false,
            "description": "Types of parent filters for a dataset source.",
            "properties": {
                "exclude": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/DatasetParent"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "description": "A filter for a parent class of a dataset source. For a given attribute, it can only be used if the current class is a subclass of the attribute."
                },
                "include": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/DatasetParent"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "description": "A filter for a parent class of a dataset source. For a given attribute, it can only be used if the current class is a subclass of the attribute."
                }
            },
            "title": "DatasetParentFilters",
            "type": "object"
        },
        "DatasetSource": {
            "additionalProperties": false,
            "description": "A dataset source.",
            "properties": {
                "destination_glob": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/DestinationGlob"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "description": "A glob class for finding files in the output / destination directory."
                },
                "exclude": {
                    "description": "Exclude files from the source that match (regexes).",
                    "items": {
                        "type": "string"
                    },
                    "type": [
                        "array",
                        "null"
                    ]
                },
                "literal": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/StandardLiteral"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "description": "A literal class with a value attribute."
                },
                "parent_filters": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/DatasetParentFilters"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "description": "Types of parent filters for a dataset source."
                },
                "source_glob": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/SourceGlob"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "description": "A glob class for finding files in the source directory."
                },
                "source_multi_glob": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/SourceMultiGlob"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "description": "A glob class for finding files in the source directory (with multiple globs)."
                }
            },
            "title": "DatasetSource",
            "type": "object"
        },
        "DateStamp": {
            "additionalProperties": false,
            "description": "A set of dates at which a data item was deposited, published and last modified.",
            "properties": {
                "deposition_date": {
                    "description": "The date a data item was received by the cryoET data portal.",
                    "format": "date",
                    "type": "string"
                },
                "last_modified_date": {
                    "description": "The date a piece of data was last modified on the cryoET data portal.",
                    "format": "date",
                    "type": "string"
                },
                "release_date": {
                    "description": "The date a data item was received by the cryoET data portal.",
                    "format": "date",
                    "type": "string"
                }
            },
            "required": [
                "deposition_date",
                "release_date",
                "last_modified_date"
            ],
            "title": "DateStamp",
            "type": "object"
        },
        "DateStampedEntity": {
            "additionalProperties": false,
            "description": "An entity with associated deposition, release and last modified dates.",
            "properties": {
                "dates": {
                    "$ref": "#/$defs/DateStamp",
                    "description": "A set of dates at which a data item was deposited, published and last modified."
                }
            },
            "required": [
                "dates"
            ],
            "title": "DateStampedEntity",
            "type": "object"
        },
        "DefaultSource": {
            "additionalProperties": false,
            "description": "A default source class that all source classes inherit from.",
            "properties": {
                "exclude": {
                    "description": "Exclude files from the source that match (regexes).",
                    "items": {
                        "type": "string"
                    },
                    "type": [
                        "array",
                        "null"
                    ]
                }
            },
            "title": "DefaultSource",
            "type": "object"
        },
        "Deposition": {
            "additionalProperties": false,
            "description": "Metadata describing a deposition.",
            "properties": {
                "authors": {
                    "description": "Author of a scientific data entity.",
                    "items": {
                        "$ref": "#/$defs/Author"
                    },
                    "minItems": 1,
                    "type": "array"
                },
                "cross_references": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/CrossReferences"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "description": "A set of cross-references to other databases and publications."
                },
                "dates": {
                    "$ref": "#/$defs/DateStamp",
                    "description": "A set of dates at which a data item was deposited, published and last modified."
                },
                "deposition_description": {
                    "description": "A short description of the deposition, similar to an abstract for a journal article or dataset.",
                    "type": "string"
                },
                "deposition_identifier": {
                    "description": "An identifier for a CryoET deposition, assigned by the Data Portal. Used to identify the deposition the entity is a part of.",
                    "type": "integer"
                },
                "deposition_title": {
                    "description": "Title of a CryoET deposition.",
                    "type": "string"
                },
                "deposition_types": {
                    "description": "Type of data in the deposition (e.g. dataset, annotation, tomogram)",
                    "items": {
                        "$ref": "#/$defs/DepositionTypesEnum",
                        "pattern": "(^annotation$)|(^dataset$)|(^tomogram$)"
                    },
                    "minItems": 1,
                    "type": "array"
                }
            },
            "required": [
                "deposition_description",
                "deposition_identifier",
                "deposition_title",
                "deposition_types",
                "dates",
                "authors"
            ],
            "title": "Deposition",
            "type": "object"
        },
        "DepositionEntity": {
            "additionalProperties": false,
            "description": "A deposition entity.",
            "properties": {
                "metadata": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/Deposition"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "description": "Metadata describing a deposition."
                },
                "sources": {
                    "description": "A deposition source.",
                    "items": {
                        "$ref": "#/$defs/DepositionSource"
                    },
                    "minItems": 1,
                    "type": "array"
                }
            },
            "required": [
                "sources"
            ],
            "title": "DepositionEntity",
            "type": "object"
        },
        "DepositionKeyPhotoEntity": {
            "additionalProperties": false,
            "description": "A deposition key photo entity.",
            "properties": {
                "sources": {
                    "description": "A key photo source.",
                    "items": {
                        "$ref": "#/$defs/DepositionKeyPhotoSource"
                    },
                    "minItems": 1,
                    "type": "array"
                }
            },
            "required": [
                "sources"
            ],
            "title": "DepositionKeyPhotoEntity",
            "type": "object"
        },
        "DepositionKeyPhotoParent": {
            "additionalProperties": false,
            "description": "A filter for a parent class of a key photo source. For a given attribute, it can only be used if the current class is a subclass of the attribute.",
            "properties": {
                "deposition": {
                    "description": "Include or exclude depositions for a source.",
                    "items": {
                        "type": "string"
                    },
                    "type": [
                        "array",
                        "null"
                    ]
                }
            },
            "title": "DepositionKeyPhotoParent",
            "type": "object"
        },
        "DepositionKeyPhotoParentFilters": {
            "additionalProperties": false,
            "description": "Types of parent filters for a key photo source.",
            "properties": {
                "exclude": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/DepositionKeyPhotoParent"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "description": "A filter for a parent class of a key photo source. For a given attribute, it can only be used if the current class is a subclass of the attribute."
                },
                "include": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/DepositionKeyPhotoParent"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "description": "A filter for a parent class of a key photo source. For a given attribute, it can only be used if the current class is a subclass of the attribute."
                }
            },
            "title": "DepositionKeyPhotoParentFilters",
            "type": "object"
        },
        "DepositionKeyPhotoSource": {
            "additionalProperties": false,
            "description": "A key photo source.",
            "properties": {
                "destination_glob": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/DestinationGlob"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "description": "A glob class for finding files in the output / destination directory."
                },
                "exclude": {
                    "description": "Exclude files from the source that match (regexes).",
                    "items": {
                        "type": "string"
                    },
                    "type": [
                        "array",
                        "null"
                    ]
                },
                "literal": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/KeyPhotoLiteral"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "description": "A literal for a key photo."
                },
                "parent_filters": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/DepositionKeyPhotoParentFilters"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "description": "Types of parent filters for a key photo source."
                },
                "source_glob": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/SourceGlob"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "description": "A glob class for finding files in the source directory."
                },
                "source_multi_glob": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/SourceMultiGlob"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "description": "A glob class for finding files in the source directory (with multiple globs)."
                }
            },
            "title": "DepositionKeyPhotoSource",
            "type": "object"
        },
        "DepositionSource": {
            "additionalProperties": false,
            "description": "A deposition source.",
            "properties": {
                "destination_glob": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/DestinationGlob"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "description": "A glob class for finding files in the output / destination directory."
                },
                "exclude": {
                    "description": "Exclude files from the source that match (regexes).",
                    "items": {
                        "type": "string"
                    },
                    "type": [
                        "array",
                        "null"
                    ]
                },
                "literal": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/StandardLiteral"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "description": "A literal class with a value attribute."
                },
                "source_glob": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/SourceGlob"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "description": "A glob class for finding files in the source directory."
                },
                "source_multi_glob": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/SourceMultiGlob"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "description": "A glob class for finding files in the source directory (with multiple globs)."
                }
            },
            "title": "DepositionSource",
            "type": "object"
        },
        "DepositionTypesEnum": {
            "description": "Types of data a deposition has",
            "enum": [
                "annotation",
                "dataset",
                "tomogram"
            ],
            "title": "DepositionTypesEnum",
            "type": "string"
        },
        "DestinationGlob": {
            "additionalProperties": false,
            "description": "A glob class for finding files in the output / destination directory.",
            "properties": {
                "list_glob": {
                    "description": "The glob for the file.",
                    "type": "string"
                },
                "match_regex": {
                    "description": "The regex for the file.",
                    "type": [
                        "string",
                        "null"
                    ]
                },
                "name_regex": {
                    "description": "The regex for the name of the file.",
                    "type": [
                        "string",
                        "null"
                    ]
                }
            },
            "required": [
                "list_glob"
            ],
            "title": "DestinationGlob",
            "type": "object"
        },
        "DestinationMetadataFilter": {
            "additionalProperties": false,
            "description": "A finder class for to filter destination metadata by certain criteria.",
            "properties": {
                "filters": {
                    "description": "A key value pair for a destination metadata filter.",
                    "items": {
                        "$ref": "#/$defs/DestinationMetadataFilterKeyPair"
                    },
                    "minItems": 1,
                    "type": "array"
                }
            },
            "required": [
                "filters"
            ],
            "title": "DestinationMetadataFilter",
            "type": "object"
        },
        "DestinationMetadataFilterKeyPair": {
            "additionalProperties": false,
            "description": "A key value pair for a destination metadata filter.",
            "properties": {
                "key": {
                    "description": "The path of the key for the filter in the metadata file.",
                    "items": {
                        "type": "string"
                    },
                    "minItems": 1,
                    "type": "array"
                },
                "value": {
                    "$ref": "#/$defs/Any",
                    "description": "The value for the filter."
                }
            },
            "required": [
                "key",
                "value"
            ],
            "title": "DestinationMetadataFilterKeyPair",
            "type": "object"
        },
        "ExperimentMetadata": {
            "additionalProperties": false,
            "description": "Metadata describing sample and sample preparation methods used in a cryoET dataset.",
            "properties": {
                "cell_component": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/CellComponent"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "description": "The cellular component from which the sample was derived."
                },
                "cell_strain": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/CellStrain"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "description": "The strain or cell line from which the sample was derived."
                },
                "cell_type": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/CellType"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "description": "The cell type from which the sample was derived."
                },
                "grid_preparation": {
                    "description": "Describes Cryo-ET grid preparation.",
                    "type": [
                        "string",
                        "null"
                    ]
                },
                "organism": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/OrganismDetails"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "description": "The species from which the sample was derived."
                },
                "other_setup": {
                    "description": "Describes other setup not covered by sample preparation or grid preparation that may make this dataset unique in the same publication.",
                    "type": [
                        "string",
                        "null"
                    ]
                },
                "sample_preparation": {
                    "description": "Describes how the sample was prepared.",
                    "type": [
                        "string",
                        "null"
                    ]
                },
                "sample_type": {
                    "$ref": "#/$defs/SampleTypeEnum",
                    "description": "Type of sample imaged in a CryoET study.",
                    "pattern": "(^cell$)|(^tissue$)|(^organism$)|(^organelle$)|(^virus$)|(^in_vitro$)|(^in_silico$)|(^other$)"
                },
                "tissue": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/TissueDetails"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "description": "The type of tissue from which the sample was derived."
                }
            },
            "required": [
                "sample_type"
            ],
            "title": "ExperimentMetadata",
            "type": "object"
        },
        "FiducialAlignmentStatusEnum": {
            "description": "Fiducial Alignment method",
            "enum": [
                "FIDUCIAL",
                "NON_FIDUCIAL"
            ],
            "title": "FiducialAlignmentStatusEnum",
            "type": "string"
        },
        "Frame": {
            "additionalProperties": false,
            "description": "A frame entity.",
            "properties": {
                "astigmatic_angle": {
                    "description": "The astigmatic angle.",
                    "type": "number"
                },
                "astigmatism": {
                    "description": "The astigmatism.",
                    "type": "number"
                },
                "defocus": {
                    "description": "The defocus.",
                    "type": "number"
                },
                "dose": {
                    "description": "The dose.",
                    "type": "number"
                }
            },
            "required": [
                "dose",
                "defocus",
                "astigmatism",
                "astigmatic_angle"
            ],
            "title": "Frame",
            "type": "object"
        },
        "FrameEntity": {
            "additionalProperties": false,
            "description": "A frame entity.",
            "properties": {
                "metadata": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/Frame"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "description": "A frame entity."
                },
                "sources": {
                    "description": "A frame source.",
                    "items": {
                        "$ref": "#/$defs/FrameSource"
                    },
                    "minItems": 1,
                    "type": "array"
                }
            },
            "required": [
                "sources"
            ],
            "title": "FrameEntity",
            "type": "object"
        },
        "FrameParent": {
            "additionalProperties": false,
            "description": "A filter for a parent class of a frame source. For a given attribute, it can only be used if the current class is a subclass of the attribute.",
            "properties": {
                "dataset": {
                    "description": "Include or exclude datasets for a source.",
                    "items": {
                        "type": "string"
                    },
                    "type": [
                        "array",
                        "null"
                    ]
                },
                "deposition": {
                    "description": "Include or exclude depositions for a source.",
                    "items": {
                        "type": "string"
                    },
                    "type": [
                        "array",
                        "null"
                    ]
                },
                "run": {
                    "description": "Include or exclude runs for a source.",
                    "items": {
                        "type": "string"
                    },
                    "type": [
                        "array",
                        "null"
                    ]
                }
            },
            "title": "FrameParent",
            "type": "object"
        },
        "FrameParentFilters": {
            "additionalProperties": false,
            "description": "Types of parent filters for a frame source.",
            "properties": {
                "exclude": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/FrameParent"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "description": "A filter for a parent class of a frame source. For a given attribute, it can only be used if the current class is a subclass of the attribute."
                },
                "include": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/FrameParent"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "description": "A filter for a parent class of a frame source. For a given attribute, it can only be used if the current class is a subclass of the attribute."
                }
            },
            "title": "FrameParentFilters",
            "type": "object"
        },
        "FrameSource": {
            "additionalProperties": false,
            "description": "A frame source.",
            "properties": {
                "destination_glob": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/DestinationGlob"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "description": "A glob class for finding files in the output / destination directory."
                },
                "exclude": {
                    "description": "Exclude files from the source that match (regexes).",
                    "items": {
                        "type": "string"
                    },
                    "type": [
                        "array",
                        "null"
                    ]
                },
                "literal": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/StandardLiteral"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "description": "A literal class with a value attribute."
                },
                "parent_filters": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/FrameParentFilters"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "description": "Types of parent filters for a frame source."
                },
                "source_glob": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/SourceGlob"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "description": "A glob class for finding files in the source directory."
                },
                "source_multi_glob": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/SourceMultiGlob"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "description": "A glob class for finding files in the source directory (with multiple globs)."
                }
            },
            "title": "FrameSource",
            "type": "object"
        },
        "FundedEntity": {
            "additionalProperties": false,
            "description": "An entity with associated funding sources.",
            "properties": {
                "funding": {
                    "description": "A funding source for a scientific data entity (base for JSON and DB representation).",
                    "items": {
                        "$ref": "#/$defs/FundingDetails"
                    },
                    "type": [
                        "array",
                        "null"
                    ]
                }
            },
            "title": "FundedEntity",
            "type": "object"
        },
        "FundingDetails": {
            "additionalProperties": false,
            "description": "A funding source for a scientific data entity (base for JSON and DB representation).",
            "properties": {
                "funding_agency_name": {
                    "description": "The name of the funding source.",
                    "type": [
                        "string",
                        "null"
                    ]
                },
                "grant_id": {
                    "description": "Grant identifier provided by the funding agency",
                    "type": [
                        "string",
                        "null"
                    ]
                }
            },
            "title": "FundingDetails",
            "type": "object"
        },
        "GainEntity": {
            "additionalProperties": false,
            "description": "A gain entity.",
            "properties": {
                "sources": {
                    "description": "A gain source.",
                    "items": {
                        "$ref": "#/$defs/GainSource"
                    },
                    "minItems": 1,
                    "type": "array"
                }
            },
            "required": [
                "sources"
            ],
            "title": "GainEntity",
            "type": "object"
        },
        "GainParent": {
            "additionalProperties": false,
            "description": "A filter for a parent class of a gain source. For a given attribute, it can only be used if the current class is a subclass of the attribute.",
            "properties": {
                "dataset": {
                    "description": "Include or exclude datasets for a source.",
                    "items": {
                        "type": "string"
                    },
                    "type": [
                        "array",
                        "null"
                    ]
                },
                "deposition": {
                    "description": "Include or exclude depositions for a source.",
                    "items": {
                        "type": "string"
                    },
                    "type": [
                        "array",
                        "null"
                    ]
                },
                "run": {
                    "description": "Include or exclude runs for a source.",
                    "items": {
                        "type": "string"
                    },
                    "type": [
                        "array",
                        "null"
                    ]
                }
            },
            "title": "GainParent",
            "type": "object"
        },
        "GainParentFilters": {
            "additionalProperties": false,
            "description": "Types of parent filters for a gain source.",
            "properties": {
                "exclude": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/GainParent"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "description": "A filter for a parent class of a gain source. For a given attribute, it can only be used if the current class is a subclass of the attribute."
                },
                "include": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/GainParent"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "description": "A filter for a parent class of a gain source. For a given attribute, it can only be used if the current class is a subclass of the attribute."
                }
            },
            "title": "GainParentFilters",
            "type": "object"
        },
        "GainSource": {
            "additionalProperties": false,
            "description": "A gain source.",
            "properties": {
                "destination_glob": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/DestinationGlob"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "description": "A glob class for finding files in the output / destination directory."
                },
                "exclude": {
                    "description": "Exclude files from the source that match (regexes).",
                    "items": {
                        "type": "string"
                    },
                    "type": [
                        "array",
                        "null"
                    ]
                },
                "literal": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/StandardLiteral"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "description": "A literal class with a value attribute."
                },
                "parent_filters": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/GainParentFilters"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "description": "Types of parent filters for a gain source."
                },
                "source_glob": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/SourceGlob"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "description": "A glob class for finding files in the source directory."
                },
                "source_multi_glob": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/SourceMultiGlob"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "description": "A glob class for finding files in the source directory (with multiple globs)."
                }
            },
            "title": "GainSource",
            "type": "object"
        },
        "KeyImageEntity": {
            "additionalProperties": false,
            "description": "A key image entity.",
            "properties": {
                "sources": {
                    "description": "A key image source.",
                    "items": {
                        "$ref": "#/$defs/KeyImageSource"
                    },
                    "minItems": 1,
                    "type": "array"
                }
            },
            "required": [
                "sources"
            ],
            "title": "KeyImageEntity",
            "type": "object"
        },
        "KeyImageParent": {
            "additionalProperties": false,
            "description": "A filter for a parent class of a key image source. For a given attribute, it can only be used if the current class is a subclass of the attribute.",
            "properties": {
                "dataset": {
                    "description": "Include or exclude datasets for a source.",
                    "items": {
                        "type": "string"
                    },
                    "type": [
                        "array",
                        "null"
                    ]
                },
                "deposition": {
                    "description": "Include or exclude depositions for a source.",
                    "items": {
                        "type": "string"
                    },
                    "type": [
                        "array",
                        "null"
                    ]
                },
                "run": {
                    "description": "Include or exclude runs for a source.",
                    "items": {
                        "type": "string"
                    },
                    "type": [
                        "array",
                        "null"
                    ]
                },
                "tomogram": {
                    "description": "Include or exclude tomograms for a source.",
                    "items": {
                        "type": "string"
                    },
                    "type": [
                        "array",
                        "null"
                    ]
                },
                "voxel_spacing": {
                    "description": "Include or exclude voxel spacings for a source.",
                    "items": {
                        "type": "string"
                    },
                    "type": [
                        "array",
                        "null"
                    ]
                }
            },
            "title": "KeyImageParent",
            "type": "object"
        },
        "KeyImageParentFilters": {
            "additionalProperties": false,
            "description": "Types of parent filters for a key image source.",
            "properties": {
                "exclude": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/KeyImageParent"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "description": "A filter for a parent class of a key image source. For a given attribute, it can only be used if the current class is a subclass of the attribute."
                },
                "include": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/KeyImageParent"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "description": "A filter for a parent class of a key image source. For a given attribute, it can only be used if the current class is a subclass of the attribute."
                }
            },
            "title": "KeyImageParentFilters",
            "type": "object"
        },
        "KeyImageSource": {
            "additionalProperties": false,
            "description": "A key image source.",
            "properties": {
                "destination_glob": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/DestinationGlob"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "description": "A glob class for finding files in the output / destination directory."
                },
                "exclude": {
                    "description": "Exclude files from the source that match (regexes).",
                    "items": {
                        "type": "string"
                    },
                    "type": [
                        "array",
                        "null"
                    ]
                },
                "literal": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/StandardLiteral"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "description": "A literal class with a value attribute."
                },
                "parent_filters": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/KeyImageParentFilters"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "description": "Types of parent filters for a key image source."
                },
                "source_glob": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/SourceGlob"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "description": "A glob class for finding files in the source directory."
                },
                "source_multi_glob": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/SourceMultiGlob"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "description": "A glob class for finding files in the source directory (with multiple globs)."
                }
            },
            "title": "KeyImageSource",
            "type": "object"
        },
        "KeyPhotoLiteral": {
            "additionalProperties": false,
            "description": "A literal for a key photo.",
            "properties": {
                "value": {
                    "$ref": "#/$defs/PicturePath",
                    "description": "A set of paths to representative images of a piece of data."
                }
            },
            "required": [
                "value"
            ],
            "title": "KeyPhotoLiteral",
            "type": "object"
        },
        "MicroscopeDetails": {
            "additionalProperties": false,
            "description": "The microscope used to collect the tilt series.",
            "properties": {
                "additional_info": {
                    "description": "Other microscope optical setup information, in addition to energy filter, phase plate and image corrector",
                    "type": [
                        "string",
                        "null"
                    ]
                },
                "manufacturer": {
                    "$ref": "#/$defs/Any",
                    "anyOf": [
                        {
                            "$ref": "#/$defs/TiltseriesMicroscopeManufacturerEnum",
                            "description": "Name of the microscope manufacturer"
                        },
                        {
                            "pattern": "^[ ]*\\{[a-zA-Z0-9_-]+\\}[ ]*$",
                            "type": "string"
                        }
                    ],
                    "description": "Name of the microscope manufacturer",
                    "pattern": "(^FEI$)|(^TFS$)|(^JEOL$)|(^SIMULATED$)|(^[ ]*\\{[a-zA-Z0-9_-]+\\}[ ]*$)"
                },
                "model": {
                    "description": "Microscope model name",
                    "type": "string"
                }
            },
            "required": [
                "manufacturer",
                "model"
            ],
            "title": "MicroscopeDetails",
            "type": "object"
        },
        "MicroscopeOpticalSetup": {
            "additionalProperties": false,
            "description": "The optical setup of the microscope used to collect the tilt series.",
            "properties": {
                "energy_filter": {
                    "description": "Energy filter setup used",
                    "type": "string"
                },
                "image_corrector": {
                    "description": "Image corrector setup",
                    "type": [
                        "string",
                        "null"
                    ]
                },
                "phase_plate": {
                    "description": "Phase plate configuration",
                    "type": [
                        "string",
                        "null"
                    ]
                }
            },
            "required": [
                "energy_filter"
            ],
            "title": "MicroscopeOpticalSetup",
            "type": "object"
        },
        "OrganismDetails": {
            "additionalProperties": false,
            "description": "The species from which the sample was derived.",
            "properties": {
                "name": {
                    "description": "Name of the organism from which a biological sample used in a CryoET study is derived from, e.g. homo sapiens.",
                    "type": "string"
                },
                "taxonomy_id": {
                    "description": "NCBI taxonomy identifier for the organism, e.g. 9606",
                    "minimum": 1,
                    "type": [
                        "integer",
                        "null"
                    ]
                }
            },
            "required": [
                "name"
            ],
            "title": "OrganismDetails",
            "type": "object"
        },
        "PicturePath": {
            "additionalProperties": false,
            "description": "A set of paths to representative images of a piece of data.",
            "properties": {
                "snapshot": {
                    "description": "Path to the dataset preview image relative to the dataset directory root.",
                    "pattern": "^(((https?|s3)://)|cryoetportal-rawdatasets-dev).*$",
                    "type": [
                        "string",
                        "null"
                    ]
                },
                "thumbnail": {
                    "description": "Path to the thumbnail of preview image relative to the dataset directory root.",
                    "pattern": "^(((https?|s3)://)|cryoetportal-rawdatasets-dev).*$",
                    "type": [
                        "string",
                        "null"
                    ]
                }
            },
            "title": "PicturePath",
            "type": "object"
        },
        "PicturedEntity": {
            "additionalProperties": false,
            "description": "An entity with associated preview images.",
            "properties": {
                "key_photos": {
                    "$ref": "#/$defs/PicturePath",
                    "description": "A set of paths to representative images of a piece of data."
                }
            },
            "required": [
                "key_photos"
            ],
            "title": "PicturedEntity",
            "type": "object"
        },
        "RawTiltEntity": {
            "additionalProperties": false,
            "description": "A raw tilt entity.",
            "properties": {
                "sources": {
                    "description": "A raw tilt source.",
                    "items": {
                        "$ref": "#/$defs/RawTiltSource"
                    },
                    "minItems": 1,
                    "type": "array"
                }
            },
            "required": [
                "sources"
            ],
            "title": "RawTiltEntity",
            "type": "object"
        },
        "RawTiltParent": {
            "additionalProperties": false,
            "description": "A filter for a parent class of a raw tilt source. For a given attribute, it can only be used if the current class is a subclass of the attribute.",
            "properties": {
                "dataset": {
                    "description": "Include or exclude datasets for a source.",
                    "items": {
                        "type": "string"
                    },
                    "type": [
                        "array",
                        "null"
                    ]
                },
                "deposition": {
                    "description": "Include or exclude depositions for a source.",
                    "items": {
                        "type": "string"
                    },
                    "type": [
                        "array",
                        "null"
                    ]
                },
                "run": {
                    "description": "Include or exclude runs for a source.",
                    "items": {
                        "type": "string"
                    },
                    "type": [
                        "array",
                        "null"
                    ]
                }
            },
            "title": "RawTiltParent",
            "type": "object"
        },
        "RawTiltParentFilters": {
            "additionalProperties": false,
            "description": "Types of parent filters for a raw tilt source.",
            "properties": {
                "exclude": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/RawTiltParent"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "description": "A filter for a parent class of a raw tilt source. For a given attribute, it can only be used if the current class is a subclass of the attribute."
                },
                "include": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/RawTiltParent"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "description": "A filter for a parent class of a raw tilt source. For a given attribute, it can only be used if the current class is a subclass of the attribute."
                }
            },
            "title": "RawTiltParentFilters",
            "type": "object"
        },
        "RawTiltSource": {
            "additionalProperties": false,
            "description": "A raw tilt source.",
            "properties": {
                "destination_glob": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/DestinationGlob"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "description": "A glob class for finding files in the output / destination directory."
                },
                "exclude": {
                    "description": "Exclude files from the source that match (regexes).",
                    "items": {
                        "type": "string"
                    },
                    "type": [
                        "array",
                        "null"
                    ]
                },
                "literal": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/StandardLiteral"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "description": "A literal class with a value attribute."
                },
                "parent_filters": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/RawTiltParentFilters"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "description": "Types of parent filters for a raw tilt source."
                },
                "source_glob": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/SourceGlob"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "description": "A glob class for finding files in the source directory."
                },
                "source_multi_glob": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/SourceMultiGlob"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "description": "A glob class for finding files in the source directory (with multiple globs)."
                }
            },
            "title": "RawTiltSource",
            "type": "object"
        },
        "ReferencedSource": {
            "additionalProperties": false,
            "description": "A Inherited by a majority of source classes.",
            "properties": {
                "destination_filter": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/DestinationMetadataFilter"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "description": "A finder class for to filter destination metadata by certain criteria."
                },
                "destination_glob": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/DestinationGlob"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "description": "A glob class for finding files in the output / destination directory."
                },
                "exclude": {
                    "description": "Exclude files from the source that match (regexes).",
                    "items": {
                        "type": "string"
                    },
                    "type": [
                        "array",
                        "null"
                    ]
                },
                "literal": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/StandardLiteral"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "description": "A literal class with a value attribute."
                },
                "source_glob": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/SourceGlob"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "description": "A glob class for finding files in the source directory."
                },
                "source_multi_glob": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/SourceMultiGlob"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "description": "A glob class for finding files in the source directory (with multiple globs)."
                }
            },
            "title": "ReferencedSource",
            "type": "object"
        },
        "RunEntity": {
            "additionalProperties": false,
            "description": "A run entity.",
            "properties": {
                "sources": {
                    "description": "A run source.",
                    "items": {
                        "$ref": "#/$defs/RunSource"
                    },
                    "minItems": 1,
                    "type": "array"
                }
            },
            "required": [
                "sources"
            ],
            "title": "RunEntity",
            "type": "object"
        },
        "RunParent": {
            "additionalProperties": false,
            "description": "A filter for a parent class of a run source. For a given attribute, it can only be used if the current class is a subclass of the attribute.",
            "properties": {
                "dataset": {
                    "description": "Include or exclude datasets for a source.",
                    "items": {
                        "type": "string"
                    },
                    "type": [
                        "array",
                        "null"
                    ]
                },
                "deposition": {
                    "description": "Include or exclude depositions for a source.",
                    "items": {
                        "type": "string"
                    },
                    "type": [
                        "array",
                        "null"
                    ]
                }
            },
            "title": "RunParent",
            "type": "object"
        },
        "RunParentFilters": {
            "additionalProperties": false,
            "description": "Types of parent filters for a run source.",
            "properties": {
                "exclude": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/RunParent"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "description": "A filter for a parent class of a run source. For a given attribute, it can only be used if the current class is a subclass of the attribute."
                },
                "include": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/RunParent"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "description": "A filter for a parent class of a run source. For a given attribute, it can only be used if the current class is a subclass of the attribute."
                }
            },
            "title": "RunParentFilters",
            "type": "object"
        },
        "RunSource": {
            "additionalProperties": false,
            "description": "A run source.",
            "properties": {
                "destination_glob": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/DestinationGlob"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "description": "A glob class for finding files in the output / destination directory."
                },
                "exclude": {
                    "description": "Exclude files from the source that match (regexes).",
                    "items": {
                        "type": "string"
                    },
                    "type": [
                        "array",
                        "null"
                    ]
                },
                "literal": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/StandardLiteral"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "description": "A literal class with a value attribute."
                },
                "parent_filters": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/RunParentFilters"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "description": "Types of parent filters for a run source."
                },
                "source_glob": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/SourceGlob"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "description": "A glob class for finding files in the source directory."
                },
                "source_multi_glob": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/SourceMultiGlob"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "description": "A glob class for finding files in the source directory (with multiple globs)."
                }
            },
            "title": "RunSource",
            "type": "object"
        },
        "SampleTypeEnum": {
            "description": "Type of sample imaged in a CryoET study.",
            "enum": [
                "cell",
                "tissue",
                "organism",
                "organelle",
                "virus",
                "in_vitro",
                "in_silico",
                "other"
            ],
            "title": "SampleTypeEnum",
            "type": "string"
        },
        "SourceGlob": {
            "additionalProperties": false,
            "description": "A glob class for finding files in the source directory.",
            "properties": {
                "list_glob": {
                    "description": "The glob for the file.",
                    "type": "string"
                },
                "match_regex": {
                    "description": "The regex for the file.",
                    "type": [
                        "string",
                        "null"
                    ]
                },
                "name_regex": {
                    "description": "The regex for the name of the file.",
                    "type": [
                        "string",
                        "null"
                    ]
                }
            },
            "required": [
                "list_glob"
            ],
            "title": "SourceGlob",
            "type": "object"
        },
        "SourceMultiGlob": {
            "additionalProperties": false,
            "description": "A glob class for finding files in the source directory (with multiple globs).",
            "properties": {
                "list_globs": {
                    "description": "The globs for the file.",
                    "items": {
                        "type": "string"
                    },
                    "minItems": 1,
                    "type": "array"
                }
            },
            "required": [
                "list_globs"
            ],
            "title": "SourceMultiGlob",
            "type": "object"
        },
        "StandardLiteral": {
            "additionalProperties": false,
            "description": "A literal class with a value attribute.",
            "properties": {
                "value": {
                    "description": "The value for the literal.",
                    "items": {
                        "$ref": "#/$defs/Any"
                    },
                    "minItems": 1,
                    "type": "array"
                }
            },
            "required": [
                "value"
            ],
            "title": "StandardLiteral",
            "type": "object"
        },
        "StandardSource": {
            "additionalProperties": false,
            "description": "A generalized source class with glob finders. Inherited by a majority of source classes.",
            "properties": {
                "destination_glob": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/DestinationGlob"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "description": "A glob class for finding files in the output / destination directory."
                },
                "exclude": {
                    "description": "Exclude files from the source that match (regexes).",
                    "items": {
                        "type": "string"
                    },
                    "type": [
                        "array",
                        "null"
                    ]
                },
                "literal": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/StandardLiteral"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "description": "A literal class with a value attribute."
                },
                "source_glob": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/SourceGlob"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "description": "A glob class for finding files in the source directory."
                },
                "source_multi_glob": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/SourceMultiGlob"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "description": "A glob class for finding files in the source directory (with multiple globs)."
                }
            },
            "title": "StandardSource",
            "type": "object"
        },
        "StandardizationConfig": {
            "additionalProperties": false,
            "description": "A standardization configuration.",
            "properties": {
                "deposition_id": {
                    "description": "The deposition ID.",
                    "type": "integer"
                },
                "run_data_map_file": {
                    "description": "The run data map file.",
                    "type": [
                        "string",
                        "null"
                    ]
                },
                "run_to_frame_map_csv": {
                    "description": "The run to frame map CSV.",
                    "type": [
                        "string",
                        "null"
                    ]
                },
                "run_to_tomo_map_csv": {
                    "description": "The run to tomogram map CSV.",
                    "type": [
                        "string",
                        "null"
                    ]
                },
                "run_to_ts_map_csv": {
                    "description": "The run to tilt series map CSV.",
                    "type": [
                        "string",
                        "null"
                    ]
                },
                "source_prefix": {
                    "description": "The source prefix of the input files.",
                    "type": "string"
                }
            },
            "required": [
                "deposition_id",
                "source_prefix"
            ],
            "title": "StandardizationConfig",
            "type": "object"
        },
        "TiltRange": {
            "additionalProperties": false,
            "description": "The range of tilt angles in the tilt series.",
            "properties": {
                "max": {
                    "$ref": "#/$defs/Any",
                    "anyOf": [
                        {
                            "description": "Maximal tilt angle in degrees",
                            "maximum": 90,
                            "minimum": -90,
                            "type": "number"
                        },
                        {
                            "pattern": "^float[ ]*\\{[a-zA-Z0-9_-]+\\}[ ]*$",
                            "type": "string"
                        }
                    ],
                    "description": "Maximal tilt angle in degrees",
                    "maximum": 90,
                    "minimum": -90,
                    "pattern": "^float[ ]*\\{[a-zA-Z0-9_-]+\\}[ ]*$"
                },
                "min": {
                    "$ref": "#/$defs/Any",
                    "anyOf": [
                        {
                            "description": "Minimal tilt angle in degrees",
                            "maximum": 90,
                            "minimum": -90,
                            "type": "number"
                        },
                        {
                            "pattern": "^float[ ]*\\{[a-zA-Z0-9_-]+\\}[ ]*$",
                            "type": "string"
                        }
                    ],
                    "description": "Minimal tilt angle in degrees",
                    "maximum": 90,
                    "minimum": -90,
                    "pattern": "^float[ ]*\\{[a-zA-Z0-9_-]+\\}[ ]*$"
                }
            },
            "required": [
                "min",
                "max"
            ],
            "title": "TiltRange",
            "type": "object"
        },
        "TiltSeries": {
            "additionalProperties": false,
            "description": "Metadata describing a tilt series.",
            "properties": {
                "acceleration_voltage": {
                    "description": "Electron Microscope Accelerator voltage in volts",
                    "minimum": 20000,
                    "type": "number"
                },
                "aligned_tiltseries_binning": {
                    "anyOf": [
                        {
                            "description": "Binning factor of the aligned tilt series",
                            "minimum": 0,
                            "type": "number"
                        },
                        {
                            "pattern": "^float[ ]*\\{[a-zA-Z0-9_-]+\\}[ ]*$",
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "description": "Binning factor of the aligned tilt series",
                    "minimum": 0,
                    "pattern": "^float[ ]*\\{[a-zA-Z0-9_-]+\\}[ ]*$"
                },
                "binning_from_frames": {
                    "anyOf": [
                        {
                            "description": "Describes the binning factor from frames to tilt series file",
                            "minimum": 0,
                            "type": "number"
                        },
                        {
                            "pattern": "^float[ ]*\\{[a-zA-Z0-9_-]+\\}[ ]*$",
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "description": "Describes the binning factor from frames to tilt series file",
                    "minimum": 0,
                    "pattern": "^float[ ]*\\{[a-zA-Z0-9_-]+\\}[ ]*$"
                },
                "camera": {
                    "$ref": "#/$defs/CameraDetails",
                    "description": "The camera used to collect the tilt series."
                },
                "data_acquisition_software": {
                    "description": "Software used to collect data",
                    "type": "string"
                },
                "frames_count": {
                    "description": "Number of frames associated with this tiltseries",
                    "type": [
                        "integer",
                        "null"
                    ]
                },
                "is_aligned": {
                    "description": "Whether this tilt series is aligned",
                    "type": "boolean"
                },
                "microscope": {
                    "$ref": "#/$defs/MicroscopeDetails",
                    "description": "The microscope used to collect the tilt series."
                },
                "microscope_optical_setup": {
                    "$ref": "#/$defs/MicroscopeOpticalSetup",
                    "description": "The optical setup of the microscope used to collect the tilt series."
                },
                "pixel_spacing": {
                    "$ref": "#/$defs/Any",
                    "anyOf": [
                        {
                            "description": "Pixel spacing for the tilt series",
                            "minimum": 0.001,
                            "type": "number"
                        },
                        {
                            "pattern": "^float[ ]*\\{[a-zA-Z0-9_-]+\\}[ ]*$",
                            "type": "string"
                        }
                    ],
                    "description": "Pixel spacing for the tilt series",
                    "minimum": 0.001,
                    "pattern": "^float[ ]*\\{[a-zA-Z0-9_-]+\\}[ ]*$"
                },
                "related_empiar_entry": {
                    "description": "If a tilt series is deposited into EMPIAR, enter the EMPIAR dataset identifier",
                    "pattern": "^EMPIAR-[0-9]+$",
                    "type": [
                        "string",
                        "null"
                    ]
                },
                "spherical_aberration_constant": {
                    "$ref": "#/$defs/Any",
                    "anyOf": [
                        {
                            "description": "Spherical Aberration Constant of the objective lens in millimeters",
                            "minimum": 0,
                            "type": "number"
                        },
                        {
                            "pattern": "^float[ ]*\\{[a-zA-Z0-9_-]+\\}[ ]*$",
                            "type": "string"
                        }
                    ],
                    "description": "Spherical Aberration Constant of the objective lens in millimeters",
                    "minimum": 0,
                    "pattern": "^float[ ]*\\{[a-zA-Z0-9_-]+\\}[ ]*$"
                },
                "tilt_alignment_software": {
                    "description": "Software used for tilt alignment",
                    "type": [
                        "string",
                        "null"
                    ]
                },
                "tilt_axis": {
                    "$ref": "#/$defs/Any",
                    "anyOf": [
                        {
                            "description": "Rotation angle in degrees",
                            "maximum": 360,
                            "minimum": -360,
                            "type": "number"
                        },
                        {
                            "pattern": "^float[ ]*\\{[a-zA-Z0-9_-]+\\}[ ]*$",
                            "type": "string"
                        }
                    ],
                    "description": "Rotation angle in degrees",
                    "maximum": 360,
                    "minimum": -360,
                    "pattern": "^float[ ]*\\{[a-zA-Z0-9_-]+\\}[ ]*$"
                },
                "tilt_range": {
                    "$ref": "#/$defs/TiltRange",
                    "description": "The range of tilt angles in the tilt series."
                },
                "tilt_series_quality": {
                    "$ref": "#/$defs/Any",
                    "anyOf": [
                        {
                            "description": "Author assessment of tilt series quality within the dataset (1-5, 5 is best)",
                            "maximum": 5,
                            "minimum": 1,
                            "type": "integer"
                        },
                        {
                            "pattern": "^int[ ]*\\{[a-zA-Z0-9_-]+\\}[ ]*$",
                            "type": "string"
                        }
                    ],
                    "description": "Author assessment of tilt series quality within the dataset (1-5, 5 is best)",
                    "maximum": 5,
                    "minimum": 1,
                    "pattern": "^int[ ]*\\{[a-zA-Z0-9_-]+\\}[ ]*$"
                },
                "tilt_step": {
                    "$ref": "#/$defs/Any",
                    "anyOf": [
                        {
                            "description": "Tilt step in degrees",
                            "maximum": 90,
                            "minimum": 0,
                            "type": "number"
                        },
                        {
                            "pattern": "^float[ ]*\\{[a-zA-Z0-9_-]+\\}[ ]*$",
                            "type": "string"
                        }
                    ],
                    "description": "Tilt step in degrees",
                    "maximum": 90,
                    "minimum": 0,
                    "pattern": "^float[ ]*\\{[a-zA-Z0-9_-]+\\}[ ]*$"
                },
                "tilting_scheme": {
                    "description": "The order of stage tilting during acquisition of the data",
                    "type": "string"
                },
                "total_flux": {
                    "$ref": "#/$defs/Any",
                    "anyOf": [
                        {
                            "description": "Number of Electrons reaching the specimen in a square Angstrom area for the entire tilt series",
                            "minimum": 0,
                            "type": "number"
                        },
                        {
                            "pattern": "^float[ ]*\\{[a-zA-Z0-9_-]+\\}[ ]*$",
                            "type": "string"
                        }
                    ],
                    "description": "Number of Electrons reaching the specimen in a square Angstrom area for the entire tilt series",
                    "minimum": 0,
                    "pattern": "^float[ ]*\\{[a-zA-Z0-9_-]+\\}[ ]*$"
                }
            },
            "required": [
                "acceleration_voltage",
                "camera",
                "data_acquisition_software",
                "is_aligned",
                "microscope",
                "microscope_optical_setup",
                "spherical_aberration_constant",
                "tilt_axis",
                "tilt_range",
                "tilt_series_quality",
                "tilt_step",
                "tilting_scheme",
                "total_flux",
                "pixel_spacing"
            ],
            "title": "TiltSeries",
            "type": "object"
        },
        "TiltSeriesEntity": {
            "additionalProperties": false,
            "description": "A tilt series entity.",
            "properties": {
                "metadata": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/TiltSeries"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "description": "Metadata describing a tilt series."
                },
                "sources": {
                    "description": "A tilt series source.",
                    "items": {
                        "$ref": "#/$defs/TiltSeriesSource"
                    },
                    "minItems": 1,
                    "type": "array"
                }
            },
            "required": [
                "sources"
            ],
            "title": "TiltSeriesEntity",
            "type": "object"
        },
        "TiltSeriesParent": {
            "additionalProperties": false,
            "description": "A filter for a parent class of a tilt series source. For a given attribute, it can only be used if the current class is a subclass of the attribute.",
            "properties": {
                "dataset": {
                    "description": "Include or exclude datasets for a source.",
                    "items": {
                        "type": "string"
                    },
                    "type": [
                        "array",
                        "null"
                    ]
                },
                "deposition": {
                    "description": "Include or exclude depositions for a source.",
                    "items": {
                        "type": "string"
                    },
                    "type": [
                        "array",
                        "null"
                    ]
                },
                "run": {
                    "description": "Include or exclude runs for a source.",
                    "items": {
                        "type": "string"
                    },
                    "type": [
                        "array",
                        "null"
                    ]
                }
            },
            "title": "TiltSeriesParent",
            "type": "object"
        },
        "TiltSeriesParentFilters": {
            "additionalProperties": false,
            "description": "Types of parent filters for a tilt series source.",
            "properties": {
                "exclude": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/TiltSeriesParent"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "description": "A filter for a parent class of a tilt series source. For a given attribute, it can only be used if the current class is a subclass of the attribute."
                },
                "include": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/TiltSeriesParent"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "description": "A filter for a parent class of a tilt series source. For a given attribute, it can only be used if the current class is a subclass of the attribute."
                }
            },
            "title": "TiltSeriesParentFilters",
            "type": "object"
        },
        "TiltSeriesSource": {
            "additionalProperties": false,
            "description": "A tilt series source.",
            "properties": {
                "destination_filter": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/DestinationMetadataFilter"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "description": "A finder class for to filter destination metadata by certain criteria."
                },
                "destination_glob": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/DestinationGlob"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "description": "A glob class for finding files in the output / destination directory."
                },
                "exclude": {
                    "description": "Exclude files from the source that match (regexes).",
                    "items": {
                        "type": "string"
                    },
                    "type": [
                        "array",
                        "null"
                    ]
                },
                "literal": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/StandardLiteral"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "description": "A literal class with a value attribute."
                },
                "parent_filters": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/TiltSeriesParentFilters"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "description": "Types of parent filters for a tilt series source."
                },
                "source_glob": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/SourceGlob"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "description": "A glob class for finding files in the source directory."
                },
                "source_multi_glob": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/SourceMultiGlob"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "description": "A glob class for finding files in the source directory (with multiple globs)."
                }
            },
            "title": "TiltSeriesSource",
            "type": "object"
        },
        "TiltseriesCameraAcquireModeEnum": {
            "description": "Camera acquisition mode",
            "enum": [
                "counting",
                "superresolution",
                "linear",
                "cds"
            ],
            "title": "TiltseriesCameraAcquireModeEnum",
            "type": "string"
        },
        "TiltseriesMicroscopeManufacturerEnum": {
            "description": "Microscope manufacturer",
            "enum": [
                "FEI",
                "TFS",
                "JEOL",
                "SIMULATED"
            ],
            "title": "TiltseriesMicroscopeManufacturerEnum",
            "type": "string"
        },
        "TissueDetails": {
            "additionalProperties": false,
            "description": "The type of tissue from which the sample was derived.",
            "properties": {
                "id": {
                    "description": "The UBERON identifier for the tissue.",
                    "pattern": "^BTO:[0-9]{7}$",
                    "type": [
                        "string",
                        "null"
                    ]
                },
                "name": {
                    "description": "Name of the tissue from which a biological sample used in a CryoET study is derived from.",
                    "type": "string"
                }
            },
            "required": [
                "name"
            ],
            "title": "TissueDetails",
            "type": "object"
        },
        "Tomogram": {
            "additionalProperties": false,
            "description": "Metadata describing a tomogram.",
            "properties": {
                "affine_transformation_matrix": {
                    "items": {
                        "additionalProperties": true,
                        "type": [
                            "null",
                            "boolean",
                            "object",
                            "number",
                            "string",
                            "array"
                        ]
                    },
                    "type": [
                        "array",
                        "null"
                    ]
                },
                "align_software": {
                    "description": "Software used for alignment",
                    "type": [
                        "string",
                        "null"
                    ]
                },
                "authors": {
                    "description": "Author of a scientific data entity.",
                    "items": {
                        "$ref": "#/$defs/Author"
                    },
                    "minItems": 1,
                    "type": "array"
                },
                "cross_references": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/CrossReferences"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "description": "A set of cross-references to other databases and publications."
                },
                "ctf_corrected": {
                    "description": "Whether this tomogram is CTF corrected",
                    "type": [
                        "boolean",
                        "null"
                    ]
                },
                "dates": {
                    "$ref": "#/$defs/DateStamp",
                    "description": "A set of dates at which a data item was deposited, published and last modified."
                },
                "fiducial_alignment_status": {
                    "$ref": "#/$defs/Any",
                    "anyOf": [
                        {
                            "$ref": "#/$defs/FiducialAlignmentStatusEnum",
                            "description": "Whether the tomographic alignment was computed based on fiducial markers."
                        },
                        {
                            "pattern": "^[ ]*\\{[a-zA-Z0-9_-]+\\}[ ]*$",
                            "type": "string"
                        }
                    ],
                    "description": "Whether the tomographic alignment was computed based on fiducial markers.",
                    "pattern": "(^FIDUCIAL$)|(^NON_FIDUCIAL$)|(^[ ]*\\{[a-zA-Z0-9_-]+\\}[ ]*$)"
                },
                "is_visualization_default": {
                    "description": "Whether the tomogram is the default for visualization.",
                    "type": "boolean"
                },
                "offset": {
                    "$ref": "#/$defs/TomogramOffset",
                    "description": "The offset of a tomogram in voxels in each dimension relative to the canonical tomogram."
                },
                "processing": {
                    "$ref": "#/$defs/TomogramProcessingEnum",
                    "description": "Describe additional processing used to derive the tomogram",
                    "pattern": "(^denoised$)|(^filtered$)|(^raw$)"
                },
                "processing_software": {
                    "description": "Processing software used to derive the tomogram",
                    "type": [
                        "string",
                        "null"
                    ]
                },
                "reconstruction_method": {
                    "$ref": "#/$defs/Any",
                    "anyOf": [
                        {
                            "$ref": "#/$defs/TomogramReconstructionMethodEnum",
                            "description": "Describe reconstruction method (WBP, SART, SIRT)"
                        },
                        {
                            "pattern": "^[ ]*\\{[a-zA-Z0-9_-]+\\}[ ]*$",
                            "type": "string"
                        }
                    ],
                    "description": "Describe reconstruction method (WBP, SART, SIRT)",
                    "pattern": "(^SART$)|(^Fourier Space$)|(^SIRT$)|(^WBP$)|(^Unknown$)|(^[ ]*\\{[a-zA-Z0-9_-]+\\}[ ]*$)"
                },
                "reconstruction_software": {
                    "description": "Name of software used for reconstruction",
                    "type": "string"
                },
                "size": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/TomogramSize"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "description": "The size of a tomogram in voxels in each dimension."
                },
                "tomogram_version": {
                    "description": "Version of tomogram",
                    "minimum": 0,
                    "type": "number"
                },
                "voxel_spacing": {
                    "$ref": "#/$defs/Any",
                    "anyOf": [
                        {
                            "description": "Voxel spacing equal in all three axes in angstroms",
                            "minimum": 0.001,
                            "type": "number"
                        },
                        {
                            "pattern": "^float[ ]*\\{[a-zA-Z0-9_-]+\\}[ ]*$",
                            "type": "string"
                        }
                    ],
                    "description": "Voxel spacing equal in all three axes in angstroms",
                    "minimum": 0.001,
                    "pattern": "^float[ ]*\\{[a-zA-Z0-9_-]+\\}[ ]*$"
                }
            },
            "required": [
                "voxel_spacing",
                "fiducial_alignment_status",
                "reconstruction_method",
                "reconstruction_software",
                "processing",
                "tomogram_version",
                "offset",
                "is_visualization_default",
                "dates",
                "authors"
            ],
            "title": "Tomogram",
            "type": "object"
        },
        "TomogramEntity": {
            "additionalProperties": false,
            "description": "A tomogram entity.",
            "properties": {
                "metadata": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/Tomogram"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "description": "Metadata describing a tomogram."
                },
                "sources": {
                    "description": "A tomogram source.",
                    "items": {
                        "$ref": "#/$defs/TomogramSource"
                    },
                    "minItems": 1,
                    "type": "array"
                }
            },
            "required": [
                "sources"
            ],
            "title": "TomogramEntity",
            "type": "object"
        },
        "TomogramHeader": {
            "additionalProperties": false,
            "description": "A tomogram header, a unique source attribute for voxel spacing.",
            "properties": {
                "header_key": {
                    "description": "The key in the header file for the voxel spacing.",
                    "type": [
                        "string",
                        "null"
                    ]
                },
                "list_glob": {
                    "description": "The glob for the tomogram header file.",
                    "type": "string"
                },
                "match_regex": {
                    "description": "The regex for the tomogram header file.",
                    "type": [
                        "string",
                        "null"
                    ]
                }
            },
            "required": [
                "list_glob"
            ],
            "title": "TomogramHeader",
            "type": "object"
        },
        "TomogramOffset": {
            "additionalProperties": false,
            "description": "The offset of a tomogram in voxels in each dimension relative to the canonical tomogram.",
            "properties": {
                "x": {
                    "$ref": "#/$defs/Any",
                    "anyOf": [
                        {
                            "type": "integer"
                        },
                        {
                            "pattern": "^int[ ]*\\{[a-zA-Z0-9_-]+\\}[ ]*$",
                            "type": "string"
                        }
                    ],
                    "description": "x offset data relative to the canonical tomogram in pixels",
                    "pattern": "^int[ ]*\\{[a-zA-Z0-9_-]+\\}[ ]*$"
                },
                "y": {
                    "$ref": "#/$defs/Any",
                    "anyOf": [
                        {
                            "type": "integer"
                        },
                        {
                            "pattern": "^int[ ]*\\{[a-zA-Z0-9_-]+\\}[ ]*$",
                            "type": "string"
                        }
                    ],
                    "description": "y offset data relative to the canonical tomogram in pixels",
                    "pattern": "^int[ ]*\\{[a-zA-Z0-9_-]+\\}[ ]*$"
                },
                "z": {
                    "$ref": "#/$defs/Any",
                    "anyOf": [
                        {
                            "type": "integer"
                        },
                        {
                            "pattern": "^int[ ]*\\{[a-zA-Z0-9_-]+\\}[ ]*$",
                            "type": "string"
                        }
                    ],
                    "description": "z offset data relative to the canonical tomogram in pixels",
                    "pattern": "^int[ ]*\\{[a-zA-Z0-9_-]+\\}[ ]*$"
                }
            },
            "required": [
                "x",
                "y",
                "z"
            ],
            "title": "TomogramOffset",
            "type": "object"
        },
        "TomogramParent": {
            "additionalProperties": false,
            "description": "A filter for a parent class of a tomogram source. For a given attribute, it can only be used if the current class is a subclass of the attribute.",
            "properties": {
                "dataset": {
                    "description": "Include or exclude datasets for a source.",
                    "items": {
                        "type": "string"
                    },
                    "type": [
                        "array",
                        "null"
                    ]
                },
                "deposition": {
                    "description": "Include or exclude depositions for a source.",
                    "items": {
                        "type": "string"
                    },
                    "type": [
                        "array",
                        "null"
                    ]
                },
                "run": {
                    "description": "Include or exclude runs for a source.",
                    "items": {
                        "type": "string"
                    },
                    "type": [
                        "array",
                        "null"
                    ]
                },
                "voxel_spacing": {
                    "description": "Include or exclude voxel spacings for a source.",
                    "items": {
                        "type": "string"
                    },
                    "type": [
                        "array",
                        "null"
                    ]
                }
            },
            "title": "TomogramParent",
            "type": "object"
        },
        "TomogramParentFilters": {
            "additionalProperties": false,
            "description": "Types of parent filters for a tomogram source.",
            "properties": {
                "exclude": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/TomogramParent"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "description": "A filter for a parent class of a tomogram source. For a given attribute, it can only be used if the current class is a subclass of the attribute."
                },
                "include": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/TomogramParent"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "description": "A filter for a parent class of a tomogram source. For a given attribute, it can only be used if the current class is a subclass of the attribute."
                }
            },
            "title": "TomogramParentFilters",
            "type": "object"
        },
        "TomogramProcessingEnum": {
            "description": "Tomogram processing method",
            "enum": [
                "denoised",
                "filtered",
                "raw"
            ],
            "title": "TomogramProcessingEnum",
            "type": "string"
        },
        "TomogramReconstructionMethodEnum": {
            "description": "Tomogram reconstruction method",
            "enum": [
                "SART",
                "Fourier Space",
                "SIRT",
                "WBP",
                "Unknown"
            ],
            "title": "TomogramReconstructionMethodEnum",
            "type": "string"
        },
        "TomogramSize": {
            "additionalProperties": false,
            "description": "The size of a tomogram in voxels in each dimension.",
            "properties": {
                "x": {
                    "description": "Number of pixels in the 3D data fast axis",
                    "minimum": 0,
                    "type": "integer"
                },
                "y": {
                    "description": "Number of pixels in the 3D data medium axis",
                    "minimum": 0,
                    "type": "integer"
                },
                "z": {
                    "description": "Number of pixels in the 3D data slow axis.  This is the image projection direction at zero stage tilt",
                    "minimum": 0,
                    "type": "integer"
                }
            },
            "required": [
                "x",
                "y",
                "z"
            ],
            "title": "TomogramSize",
            "type": "object"
        },
        "TomogramSource": {
            "additionalProperties": false,
            "description": "A tomogram source.",
            "properties": {
                "destination_filter": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/DestinationMetadataFilter"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "description": "A finder class for to filter destination metadata by certain criteria."
                },
                "destination_glob": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/DestinationGlob"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "description": "A glob class for finding files in the output / destination directory."
                },
                "exclude": {
                    "description": "Exclude files from the source that match (regexes).",
                    "items": {
                        "type": "string"
                    },
                    "type": [
                        "array",
                        "null"
                    ]
                },
                "literal": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/StandardLiteral"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "description": "A literal class with a value attribute."
                },
                "parent_filters": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/TomogramParentFilters"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "description": "Types of parent filters for a tomogram source."
                },
                "source_glob": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/SourceGlob"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "description": "A glob class for finding files in the source directory."
                },
                "source_multi_glob": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/SourceMultiGlob"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "description": "A glob class for finding files in the source directory (with multiple globs)."
                }
            },
            "title": "TomogramSource",
            "type": "object"
        },
        "TomogramTypeEnum": {
            "description": "Tomogram type",
            "enum": [
                "CANONICAL"
            ],
            "title": "TomogramTypeEnum",
            "type": "string"
        },
        "VoxelSpacingEntity": {
            "additionalProperties": false,
            "description": "A voxel spacing entity.",
            "properties": {
                "sources": {
                    "description": "A voxel spacing source.",
                    "items": {
                        "$ref": "#/$defs/VoxelSpacingSource"
                    },
                    "minItems": 1,
                    "type": "array"
                }
            },
            "required": [
                "sources"
            ],
            "title": "VoxelSpacingEntity",
            "type": "object"
        },
        "VoxelSpacingLiteral": {
            "additionalProperties": false,
            "description": "A literal for a voxel spacing.",
            "properties": {
                "value": {
                    "description": "The value for the voxel spacing literal.",
                    "items": {
                        "type": "number"
                    },
                    "minItems": 1,
                    "type": "array"
                }
            },
            "required": [
                "value"
            ],
            "title": "VoxelSpacingLiteral",
            "type": "object"
        },
        "VoxelSpacingParent": {
            "additionalProperties": false,
            "description": "A filter for a parent class of a voxel spacing source. For a given attribute, it can only be used if the current class is a subclass of the attribute.",
            "properties": {
                "dataset": {
                    "description": "Include or exclude datasets for a source.",
                    "items": {
                        "type": "string"
                    },
                    "type": [
                        "array",
                        "null"
                    ]
                },
                "deposition": {
                    "description": "Include or exclude depositions for a source.",
                    "items": {
                        "type": "string"
                    },
                    "type": [
                        "array",
                        "null"
                    ]
                },
                "run": {
                    "description": "Include or exclude runs for a source.",
                    "items": {
                        "type": "string"
                    },
                    "type": [
                        "array",
                        "null"
                    ]
                }
            },
            "title": "VoxelSpacingParent",
            "type": "object"
        },
        "VoxelSpacingParentFilters": {
            "additionalProperties": false,
            "description": "Types of parent filters for a voxel spacing source.",
            "properties": {
                "exclude": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/VoxelSpacingParent"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "description": "A filter for a parent class of a voxel spacing source. For a given attribute, it can only be used if the current class is a subclass of the attribute."
                },
                "include": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/VoxelSpacingParent"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "description": "A filter for a parent class of a voxel spacing source. For a given attribute, it can only be used if the current class is a subclass of the attribute."
                }
            },
            "title": "VoxelSpacingParentFilters",
            "type": "object"
        },
        "VoxelSpacingSource": {
            "additionalProperties": false,
            "description": "A voxel spacing source.",
            "properties": {
                "destination_glob": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/DestinationGlob"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "description": "A glob class for finding files in the output / destination directory."
                },
                "exclude": {
                    "description": "Exclude files from the source that match (regexes).",
                    "items": {
                        "type": "string"
                    },
                    "type": [
                        "array",
                        "null"
                    ]
                },
                "literal": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/VoxelSpacingLiteral"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "description": "A literal for a voxel spacing."
                },
                "parent_filters": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/VoxelSpacingParentFilters"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "description": "Types of parent filters for a voxel spacing source."
                },
                "source_glob": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/SourceGlob"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "description": "A glob class for finding files in the source directory."
                },
                "tomogram_header": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/TomogramHeader"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "description": "A tomogram header, a unique source attribute for voxel spacing."
                }
            },
            "title": "VoxelSpacingSource",
            "type": "object"
        }
    },
    "$id": "cdp-ingestion-config",
    "$schema": "https://json-schema.org/draft/2019-09/schema",
    "additionalProperties": true,
    "description": "Class that models the ingestion config file.",
    "metamodel_version": "1.7.0",
    "properties": {
        "alignments": {
            "description": "An alignment entity.",
            "items": {
                "$ref": "#/$defs/AlignmentEntity"
            },
            "type": [
                "array",
                "null"
            ]
        },
        "annotations": {
            "description": "An annotation entity.",
            "items": {
                "$ref": "#/$defs/AnnotationEntity"
            },
            "type": [
                "array",
                "null"
            ]
        },
        "collection_metadata": {
            "description": "A collection_metadata entity.",
            "items": {
                "$ref": "#/$defs/CollectionMetadataEntity"
            },
            "type": [
                "array",
                "null"
            ]
        },
        "dataset_keyphotos": {
            "description": "A dataset key photo entity.",
            "items": {
                "$ref": "#/$defs/DatasetKeyPhotoEntity"
            },
            "type": [
                "array",
                "null"
            ]
        },
        "datasets": {
            "description": "A dataset entity.",
            "items": {
                "$ref": "#/$defs/DatasetEntity"
            },
            "minItems": 1,
            "type": "array"
        },
        "deposition_keyphotos": {
            "description": "A deposition key photo entity.",
            "items": {
                "$ref": "#/$defs/DepositionKeyPhotoEntity"
            },
            "type": [
                "array",
                "null"
            ]
        },
        "depositions": {
            "description": "A deposition entity.",
            "items": {
                "$ref": "#/$defs/DepositionEntity"
            },
            "minItems": 1,
            "type": "array"
        },
        "frames": {
            "description": "A frame entity.",
            "items": {
                "$ref": "#/$defs/FrameEntity"
            },
            "type": [
                "array",
                "null"
            ]
        },
        "gains": {
            "description": "A gain entity.",
            "items": {
                "$ref": "#/$defs/GainEntity"
            },
            "type": [
                "array",
                "null"
            ]
        },
        "key_images": {
            "description": "A key image entity.",
            "items": {
                "$ref": "#/$defs/KeyImageEntity"
            },
            "type": [
                "array",
                "null"
            ]
        },
        "rawtilts": {
            "description": "A raw tilt entity.",
            "items": {
                "$ref": "#/$defs/RawTiltEntity"
            },
            "type": [
                "array",
                "null"
            ]
        },
        "runs": {
            "description": "A run entity.",
            "items": {
                "$ref": "#/$defs/RunEntity"
            },
            "minItems": 1,
            "type": "array"
        },
        "standardization_config": {
            "$ref": "#/$defs/StandardizationConfig",
            "description": "A standardization configuration."
        },
        "tiltseries": {
            "description": "A tilt series entity.",
            "items": {
                "$ref": "#/$defs/TiltSeriesEntity"
            },
            "type": [
                "array",
                "null"
            ]
        },
        "tomograms": {
            "description": "A tomogram entity.",
            "items": {
                "$ref": "#/$defs/TomogramEntity"
            },
            "type": [
                "array",
                "null"
            ]
        },
        "version": {
            "description": "The version of the ingestion config.",
            "type": "string"
        },
        "voxel_spacings": {
            "description": "A voxel spacing entity.",
            "items": {
                "$ref": "#/$defs/VoxelSpacingEntity"
            },
            "minItems": 1,
            "type": "array"
        }
    },
    "required": [
        "datasets",
        "depositions",
        "runs",
        "standardization_config",
        "version",
        "voxel_spacings"
    ],
    "title": "cdp-ingestion-config",
    "type": "object",
    "version": "1.1.0"
}
